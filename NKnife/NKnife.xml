<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NKnife</name>
    </assembly>
    <members>
        <member name="T:NKnife.Base.CloneableObject">
            <summary>
                CloneableObject类是一个用来继承的抽象类。
                每一个由此类继承而来的类将自动支持克隆方法。
                该类实现了ICloneable接口，并且每个从该对象继承而来的对象都将同样地
                支持ICloneable接口。
            </summary>
        </member>
        <member name="M:NKnife.Base.CloneableObject.Clone">
            <summary>
                克隆对象，并返回一个已克隆对象的引用
            </summary>
            <returns>引用新的克隆对象</returns>
        </member>
        <member name="T:NKnife.BinAuth">
            <summary>
            二进制授权帮助类,最多支持 62 种不同权限，鉴权值最大为2的62次方（即：4611686018427387904）
            </summary>
        </member>
        <member name="M:NKnife.BinAuth.IsBinPower(System.Int64)">
            <summary>
            验证非负正整数是否为2的幂级
            </summary>
            <remarks></remarks>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:NKnife.BinAuth.GetBinPower(System.Int32)">
            <summary>
            获取2 的 x 次方值
            </summary>
            <param name="x">x 次方值</param>
            <returns></returns>
        </member>
        <member name="M:NKnife.BinAuth.GenAuthCode(System.Int64[])">
            <summary>
            生成鉴权码
            </summary>
            <param name="arr">权限值（2的幂级）</param>
            <remarks>每个鉴权值执行或操作（code = code | n）</remarks>
            <returns></returns>
        </member>
        <member name="M:NKnife.BinAuth.AddAuth(System.Int64,System.Int64)">
            <summary>
            添加权限
            </summary>
            <param name="authCode">鉴权码</param>
            <param name="auth">权限值（2的幂级）</param>
            <remarks>code = authCode | auth</remarks>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:NKnife.BinAuth.RemoveAuth(System.Int64,System.Int64)" -->
        <!-- Badly formed XML comment ignored for member "M:NKnife.BinAuth.IsHasAuth(System.Int64,System.Int64)" -->
        <member name="P:NKnife.Channels.Base.ChannelBase`1.IsSynchronous">
            <inheritdoc />
        </member>
        <member name="M:NKnife.Channels.Base.ChannelBase`1.Open">
            <inheritdoc />
        </member>
        <member name="E:NKnife.Channels.Base.ChannelBase`1.Opening">
            <inheritdoc />
        </member>
        <member name="E:NKnife.Channels.Base.ChannelBase`1.Opened">
            <inheritdoc />
        </member>
        <member name="M:NKnife.Channels.Base.ChannelBase`1.Close">
            <inheritdoc />
        </member>
        <member name="E:NKnife.Channels.Base.ChannelBase`1.Closing">
            <inheritdoc />
        </member>
        <member name="E:NKnife.Channels.Base.ChannelBase`1.Closed">
            <inheritdoc />
        </member>
        <member name="P:NKnife.Channels.Base.ChannelBase`1.JobManager">
            <inheritdoc />
        </member>
        <member name="M:NKnife.Channels.Base.ChannelBase`1.Break">
            <inheritdoc />
        </member>
        <member name="M:NKnife.Channels.Base.ChannelBase`1.SyncListen">
            <inheritdoc />
        </member>
        <member name="M:NKnife.Channels.Base.ChannelBase`1.AsyncListen">
            <inheritdoc />
        </member>
        <member name="E:NKnife.Channels.Base.ChannelBase`1.ChannelModeChanged">
            <inheritdoc />
        </member>
        <member name="E:NKnife.Channels.Base.ChannelBase`1.DataArrived">
            <inheritdoc />
        </member>
        <member name="M:NKnife.Channels.Base.ChannelBase`1.UpdateJobFunc">
            <summary>
            更新Job的执行动作
            </summary>
        </member>
        <member name="P:NKnife.Channels.Base.ChannelJobBase`1.IsPool">
            <inheritdoc />
        </member>
        <member name="P:NKnife.Channels.Base.ChannelJobBase`1.Interval">
            <inheritdoc />
        </member>
        <member name="P:NKnife.Channels.Base.ChannelJobBase`1.Timeout">
            <inheritdoc />
        </member>
        <member name="P:NKnife.Channels.Base.ChannelJobBase`1.IsLoop">
            <inheritdoc />
        </member>
        <member name="P:NKnife.Channels.Base.ChannelJobBase`1.LoopCount">
            <inheritdoc />
        </member>
        <member name="P:NKnife.Channels.Base.ChannelJobBase`1.CountOfCompleted">
            <summary>
            已完成的循环次数
            </summary>
        </member>
        <member name="P:NKnife.Channels.Base.ChannelJobBase`1.Run">
            <inheritdoc />
        </member>
        <member name="P:NKnife.Channels.Base.ChannelJobBase`1.Verify">
            <inheritdoc />
        </member>
        <member name="P:NKnife.Channels.Base.ChannelJobBase`1.Data">
            <inheritdoc />
        </member>
        <member name="P:NKnife.Channels.Base.ChannelJobBase`1.Answer">
            <inheritdoc />
        </member>
        <member name="E:NKnife.Channels.Base.ChannelJobBase`1.Answered">
            <inheritdoc />
        </member>
        <member name="M:NKnife.Channels.Base.MultiChannelBase`1.GetEnumerator">
            <summary>
                返回一个循环访问集合的枚举器。
            </summary>
            <returns>
                可用于循环访问集合的 <see cref="T:System.Collections.Generic.IEnumerator`1" />。
            </returns>
        </member>
        <member name="M:NKnife.Channels.Base.MultiChannelBase`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
                返回一个循环访问集合的枚举器。
            </summary>
            <returns>
                可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" /> 对象。
            </returns>
        </member>
        <member name="M:NKnife.Channels.Base.MultiChannelBase`1.Add(NKnife.Channels.Interfaces.IChannel{`0})">
            <summary>
                将某项添加到 <see cref="T:System.Collections.Generic.ICollection`1" /> 中。
            </summary>
            <param name="channel">要添加到 <see cref="T:System.Collections.Generic.ICollection`1" /> 的对象。</param>
            <exception cref="T:System.NotSupportedException"><see cref="T:System.Collections.Generic.ICollection`1" /> 是只读的。</exception>
        </member>
        <member name="M:NKnife.Channels.Base.MultiChannelBase`1.Clear">
            <summary>
                从 <see cref="T:System.Collections.Generic.ICollection`1" /> 中移除所有项。
            </summary>
            <exception cref="T:System.NotSupportedException"><see cref="T:System.Collections.Generic.ICollection`1" /> 是只读的。</exception>
        </member>
        <member name="M:NKnife.Channels.Base.MultiChannelBase`1.Contains(NKnife.Channels.Interfaces.IChannel{`0})">
            <summary>
                确定 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否包含特定值。
            </summary>
            <returns>
                如果在 <see cref="T:System.Collections.Generic.ICollection`1" /> 中找到 <paramref name="item" />，则为 true；否则为 false。
            </returns>
            <param name="item">要在 <see cref="T:System.Collections.Generic.ICollection`1" /> 中定位的对象。</param>
        </member>
        <member name="M:NKnife.Channels.Base.MultiChannelBase`1.System#Collections#Generic#ICollection{NKnife#Channels#Interfaces#IChannel{T}}#CopyTo(NKnife.Channels.Interfaces.IChannel{`0}[],System.Int32)">
            <summary>
                从特定的 <see cref="T:System.Array" /> 索引处开始，将 <see cref="T:System.Collections.Generic.ICollection`1" /> 的元素复制到一个
                <see cref="T:System.Array" /> 中。
            </summary>
            <param name="array">
                作为从 <see cref="T:System.Collections.Generic.ICollection`1" /> 复制的元素的目标位置的一维
                <see cref="T:System.Array" />。<see cref="T:System.Array" /> 必须具有从零开始的索引。
            </param>
            <param name="arrayIndex"><paramref name="array" /> 中从零开始的索引，将在此处开始复制。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array" /> 为 null。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex" /> 小于 0。</exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="array" /> 是多维数组。- 或 -源
                <see cref="T:System.Collections.Generic.ICollection`1" /> 中的元素数大于从 <paramref name="arrayIndex" /> 到目标
                <paramref name="array" /> 结尾处之间的可用空间。- 或 -无法自动将类型 <paramref name="T" /> 强制转换为目标 <paramref name="array" /> 的类型。
            </exception>
        </member>
        <member name="M:NKnife.Channels.Base.MultiChannelBase`1.Remove(NKnife.Channels.Interfaces.IChannel{`0})">
            <summary>
                从 <see cref="T:System.Collections.Generic.ICollection`1" /> 中移除特定对象的第一个匹配项。
            </summary>
            <returns>
                如果已从 <see cref="T:System.Collections.Generic.ICollection`1" /> 中成功移除 <paramref name="item" />，则为 true；否则为
                false。如果在原始 <see cref="T:System.Collections.Generic.ICollection`1" /> 中没有找到 <paramref name="item" />，该方法也会返回 false。
            </returns>
            <param name="item">要从 <see cref="T:System.Collections.Generic.ICollection`1" /> 中移除的对象。</param>
            <exception cref="T:System.NotSupportedException"><see cref="T:System.Collections.Generic.ICollection`1" /> 是只读的。</exception>
        </member>
        <member name="P:NKnife.Channels.Base.MultiChannelBase`1.Count">
            <summary>
                获取 <see cref="T:System.Collections.Generic.ICollection`1" /> 中包含的元素数。
            </summary>
            <returns>
                <see cref="T:System.Collections.Generic.ICollection`1" /> 中包含的元素数。
            </returns>
        </member>
        <member name="P:NKnife.Channels.Base.MultiChannelBase`1.System#Collections#Generic#ICollection{NKnife#Channels#Interfaces#IChannel{T}}#IsReadOnly">
            <summary>
                获取一个值，该值指示 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否为只读。
            </summary>
            <returns>
                如果 <see cref="T:System.Collections.Generic.ICollection`1" /> 为只读，则为 true；否则为 false。
            </returns>
        </member>
        <member name="T:NKnife.Channels.ChannelPort">
            <summary>
            描述一个数据端口，一般是只能打开一次的独占数据端口。比如串口，TCPIP端口等。
            </summary>
        </member>
        <member name="M:NKnife.Channels.ChannelPort.GetSerialPortInfo">
            <summary>
            获取串口信息
            </summary>
            <returns>一般由2个值构成，第1个值是串口，第2个值是该串口的波特率</returns>
        </member>
        <member name="M:NKnife.Channels.ChannelPort.GetHashCode">
            <summary>用作特定类型的哈希函数。</summary>
            <returns>当前 <see cref="T:System.Object" /> 的哈希代码。</returns>
        </member>
        <member name="P:NKnife.Channels.Interfaces.IChannelJob`1.Data">
            <summary>
                本次交换的数据
            </summary>
        </member>
        <member name="E:NKnife.Channels.Interfaces.IChannelJob`1.Answered">
            <summary>
            当远端应答后，通常这是同步的应答数据已收到
            </summary>
        </member>
        <member name="P:NKnife.Channels.Interfaces.IChannelJob`1.Answer">
            <summary>
            应答数据
            </summary>
        </member>
        <member name="T:NKnife.Channels.Interfaces.IChannel`1">
            <summary>
                描述一个数据通道。该来源可以是某个串口，某个TCP/IP端口，某类驱动调用等等。
            </summary>
        </member>
        <member name="P:NKnife.Channels.Interfaces.IChannel`1.IsSynchronous">
            <summary>
                描述该数据通道的模式是否是同步获取，也称对话(Talk)模式，反之异步获取，也称广播(Broadcast)模式。
            </summary>
            <returns>当true时，是同步的，反之为异步</returns>
        </member>
        <member name="P:NKnife.Channels.Interfaces.IChannel`1.IsOpen">
            <summary>
                数据通道是否打开
            </summary>
        </member>
        <member name="P:NKnife.Channels.Interfaces.IChannel`1.JobManager">
            <summary>
                工作管理器
            </summary>
        </member>
        <member name="M:NKnife.Channels.Interfaces.IChannel`1.Open">
            <summary>
                打开数据通道
            </summary>
            <returns>打开动作是否完成</returns>
        </member>
        <member name="M:NKnife.Channels.Interfaces.IChannel`1.Close">
            <summary>
                关闭数据通道
            </summary>
            <returns>关闭动作是否完成</returns>
        </member>
        <member name="E:NKnife.Channels.Interfaces.IChannel`1.ChannelModeChanged">
            <summary>
                当数据采集模式发生变化时，即同步向异步，或者异步向同步发生变化时。
            </summary>
        </member>
        <member name="E:NKnife.Channels.Interfaces.IChannel`1.DataArrived">
            <summary>
                当有数据到达时。
            </summary>
        </member>
        <member name="M:NKnife.Channels.Interfaces.IChannel`1.Break">
            <summary>
                中断正在进行的工作流的执行方法，无论是异步与同步。
            </summary>
        </member>
        <member name="M:NKnife.Channels.Interfaces.IChannel`1.SyncListen">
            <summary>
            启动同步模式的通道侦听
            </summary>
        </member>
        <member name="M:NKnife.Channels.Interfaces.IChannel`1.AsyncListen">
            <summary>
            启动异步模式的通道侦听
            </summary>
        </member>
        <member name="T:NKnife.Channels.Interfaces.IMultiChannel`1">
            <summary>
            描述一个多通道的数据采集来源。多通道中，可以是多个串口，TCPIP端口，各种驱动调用等连接方式的复合调用。
            </summary>
        </member>
        <member name="T:NKnife.Chinese.Cities">
            <summary>
                中国的城市列表。
            </summary>
        </member>
        <member name="P:NKnife.Chinese.Cities.CityConvertFunc">
            <summary>
            城市列表的生成方法，可以给入外界的方法，也可使用内部的资源文件
            <code>
            JsonConvert.DeserializeObject
            </code>
            </summary>
        </member>
        <member name="M:NKnife.Chinese.Cities.GetRandomCityName(System.Int32)">
            <summary>
                随机生成指定数量的城市（省份+城市）
            </summary>
        </member>
        <member name="T:NKnife.Chinese.IDCardData">
            <summary>中华人民共和国第2代身份证信息结构体
            </summary>
        </member>
        <member name="F:NKnife.Chinese.IDCardData.Name">
            <summary>
            姓名 
            </summary>
        </member>
        <member name="F:NKnife.Chinese.IDCardData.Sex">
            <summary>
            性别
            </summary>
        </member>
        <member name="F:NKnife.Chinese.IDCardData.Nation">
            <summary>
            民族
            </summary>
        </member>
        <member name="F:NKnife.Chinese.IDCardData.Born">
            <summary>
            出生日期
            </summary>
        </member>
        <member name="F:NKnife.Chinese.IDCardData.Address">
            <summary>
            住址
            </summary>
        </member>
        <member name="F:NKnife.Chinese.IDCardData.IDCardNo">
            <summary>
            身份证号
            </summary>
        </member>
        <member name="F:NKnife.Chinese.IDCardData.GrantDept">
            <summary>
            发证机关
            </summary>
        </member>
        <member name="F:NKnife.Chinese.IDCardData.UserLifeBegin">
            <summary>
            有效开始日期
            </summary>
        </member>
        <member name="F:NKnife.Chinese.IDCardData.UserLifeEnd">
            <summary>
            有效截止日期
            </summary>
        </member>
        <member name="F:NKnife.Chinese.IDCardData.Reserved">
            <summary>
            保留
            </summary>
        </member>
        <member name="F:NKnife.Chinese.IDCardData.PhotoFileName">
            <summary>
            照片路径
            </summary>
        </member>
        <member name="M:NKnife.Chinese.IDCardData.ToString">
            <summary>
            Returns the fully qualified type name of this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing a fully qualified type name.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:NKnife.Chinese.IDCardData.Equals(NKnife.Chinese.IDCardData)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:NKnife.Chinese.IDCardData.Check(System.String)">
            <summary>
                验证身份证号码
            </summary>
            <param name="id">身份证号码</param>
            <returns>验证成功为True，否则为False</returns>
        </member>
        <member name="M:NKnife.Chinese.IDCardData.CheckIdCard18(System.String)">
            <summary>
                验证18位身份证号
            </summary>
            <param name="id">身份证号</param>
            <returns>验证成功为True，否则为False</returns>
        </member>
        <member name="M:NKnife.Chinese.IDCardData.CheckIdCard15(System.String)">
            <summary>
                验证15位身份证号
            </summary>
            <param name="id">身份证号</param>
            <returns>验证成功为True，否则为False</returns>
        </member>
        <member name="T:NKnife.Chinese.PersonName">
            <summary>
            随机姓名生成器
            </summary>
        </member>
        <member name="T:NKnife.Chinese.Rmb">
            <summary>
            一个描述人民币的结构
            </summary>
        </member>
        <member name="P:NKnife.Chinese.Rmb.Number">
            <summary>
            Gets 位的数字.
            </summary>
            <value>The number.</value>
        </member>
        <member name="P:NKnife.Chinese.Rmb.Digit">
            <summary>
            Gets 第几位.
            </summary>
            <value>The digit.</value>
        </member>
        <member name="P:NKnife.Chinese.Rmb.NumberChar">
            <summary>
            Gets 转换成的大写字符.
            </summary>
            <value>The number char.</value>
        </member>
        <member name="P:NKnife.Chinese.Rmb.UnitChar">
            <summary>
            Gets 转换成的单位字符.
            </summary>
            <value>The unit char.</value>
        </member>
        <member name="P:NKnife.Chinese.Rmb.ChineseNumber">
            <summary>
            Gets 0-9所对应的汉字
            </summary>
        </member>
        <member name="P:NKnife.Chinese.Rmb.ChineseUnit">
            <summary>
            Gets 数字位所对应的汉字 
            </summary>
        </member>
        <member name="M:NKnife.Chinese.Rmb.ToString">
            <summary>
            返回字符串,即使用“F”作为格式符输出。
            </summary>
        </member>
        <member name="M:NKnife.Chinese.Rmb.ToString(System.String)">
             <summary>
             根据格式符要求返回字符串。
             格式符：
             D:输出完整意义的人民币大写字符串；
             F:输出仅当前位人民币大写字符串，即两位。
             </summary>
             <param name="format">
             格式符：
             D:输出完整意义的人民币大写字符串；
             F:输出仅当前位人民币大写字符串，即两位。
            </param>
        </member>
        <member name="M:NKnife.Chinese.Rmb.ToUpperChineseRmb(System.Decimal)">
            <summary> 
            将指定的数字转换成人民币的大写形式 
            </summary> 
            <param name="num">金额.数字型,小于9万亿,大于-9万亿</param>
            <returns>返回大写形式</returns> 
        </member>
        <member name="T:NKnife.Chinese.SbcAndDbc">
            <summary>全角字符与半角字符相关的帮助类
            </summary>
        </member>
        <member name="F:NKnife.Chinese.SbcAndDbc.MaxSbc">
            <summary>最大的有效全角英文字符转换成int型数据的值
            </summary>
        </member>
        <member name="F:NKnife.Chinese.SbcAndDbc.MinSbc">
            <summary>最小的有效全角英文字符转换成int型数据的值
            </summary>
        </member>
        <member name="F:NKnife.Chinese.SbcAndDbc.MaxDbc">
            <summary>最大的有效半角英文字符转换成int型数据的值
            </summary>
        </member>
        <member name="F:NKnife.Chinese.SbcAndDbc.MinDbc">
            <summary>最小的有效半角英文字符转换成int型数据的值
            </summary>
        </member>
        <member name="F:NKnife.Chinese.SbcAndDbc.Margin">
            <summary>对应的全角和半角的差
            </summary>
        </member>
        <member name="M:NKnife.Chinese.SbcAndDbc.ToDbc(System.String,System.Int32,System.Int32)">
            <summary>
            功能:全角转换为半角
            </summary>
            <param name="originalStr">要进行全角到半角转换的字符串</param>
            <param name="start">要进行全角到半角转换的开始位置,不能大于end</param>
            <param name="end">要进行全角到半角转换的结束位置,不能小于start</param>
            <returns>转换成对应半角的字符串</returns>
        </member>
        <member name="M:NKnife.Chinese.SbcAndDbc.ToDbc(System.String)">
            <summary>
            功能:全角转换为半角
            </summary>
            <param name="originalStr">要进行全角到半角转换的字符串</param>
            <returns>转换成对应半角的字符串</returns>
        </member>
        <member name="M:NKnife.Chinese.SbcAndDbc.ToDbc(System.Char)">
            <summary>
            功能:将全角字符转换为半角字符
            </summary>
            <param name="originalChar">要进行全角到半角转换的字符</param>
            <returns>全角字符转换为半角后的字符</returns>
        </member>
        <member name="M:NKnife.Chinese.SbcAndDbc.ToSbc(System.String,System.Int32,System.Int32)">
            <summary>
            功能:半角转换为全角
            </summary>
            <param name="originalStr">要进行半角到全角转换的字符串</param>
            <param name="start">要进行半角到全角转换的开始位置,不能大于end</param>
            <param name="end">要进行半角到全角转换的结束位置,不能小于start</param>
            <returns>转换成对应全角的字符串</returns>
        </member>
        <member name="M:NKnife.Chinese.SbcAndDbc.ToSbc(System.String)">
            <summary>
            功能:半角转换为全角
            </summary>
            <param name="originalStr">要进行半角到全角转换的字符串</param>
            <returns>转换成对应全角的字符串</returns>
        </member>
        <member name="M:NKnife.Chinese.SbcAndDbc.ToSbc(System.Char)">
            <summary>
            功能:半角转换为全角
            </summary>
            <param name="originalChar">要进行半角到全角转换的字符</param>
            <returns>半角字符转换为全角后的字符</returns>
        </member>
        <member name="M:NKnife.Chinese.SbcAndDbc.Exchange(System.String,System.Int32,System.Int32)">
            <summary>
            功能:将字符串中的全角字符转换为半角,半角字符转换为全角
            </summary>
            <param name="originalStr">要进行全角半角互换的字符串</param>
            <param name="start">要进行全角半角互换字符串的开始位置,不能大于end</param>
            <param name="end">要进行全角半角互换字符串的结束位置,不能小于start</param>
            <returns>全角半角互换后的字符串</returns>
        </member>
        <member name="M:NKnife.Chinese.SbcAndDbc.Exchange(System.String)">
            <summary>
            功能:将字符串中的全角字符转换为半角,半角字符转换为全角
            </summary>
            <returns>全角半角互换后的字符串</returns>
        </member>
        <member name="M:NKnife.Chinese.SbcAndDbc.Exchange(System.Char)">
            <summary>
            功能:全角字符和半角字符互换
            </summary>
            <param name="originalChar">要进行全角和半角互换的字符</param>
            <returns>行全角和半角互换后的字符</returns>
        </member>
        <member name="T:NKnife.Chinese.SimplifyChineseChar">
            <summary>
            中国的简体汉字
            </summary>
        </member>
        <member name="M:NKnife.Chinese.SimplifyChineseChar.IndexOf(System.String)">
            <summary>
                获取指定的汉字的使用频率，数字越小，使用频率越高
            </summary>
            <param name="word">指定的汉字</param>
            <returns>指定的汉字的使用频率</returns>
        </member>
        <member name="M:NKnife.Chinese.SimplifyChineseChar.IndexOf(System.Char)">
            <summary>
                获取指定的汉字的使用频率，数字越小，使用频率越高
            </summary>
            <param name="word">指定的汉字</param>
            <returns>指定的汉字的使用频率</returns>
        </member>
        <member name="T:NKnife.Chinese.Spell">
            <summary>
                一个与中国拼音相关帮助类
            </summary>
        </member>
        <member name="F:NKnife.Chinese.Spell._Asc">
            <summary>
                包含字符 ASC 码的整形数组。
            </summary>
        </member>
        <member name="F:NKnife.Chinese.Spell._Pinyin">
            <summary>
                包含汉字拼音的字符串数组。
            </summary>
        </member>
        <member name="F:NKnife.Chinese.Spell._bad">
            <summary>
                包含要排除处理的字符的字符串数组。
            </summary>
        </member>
        <member name="P:NKnife.Chinese.Spell.SpecialPhrase">
            <summary>
                设置或获取包含例外词组读音的键/值对的组合。
            </summary>
        </member>
        <member name="M:NKnife.Chinese.Spell.GetStringSpell(System.String,System.String,System.Boolean)">
            <summary>
                将指定中文字符串转换为拼音形式。
            </summary>
            <param name="chs">要转换的中文字符串。</param>
            <param name="separator">连接拼音之间的分隔符。</param>
            <param name="initialCap">指定是否将首字母大写。</param>
            <returns>包含中文字符串的拼音的字符串。</returns>
        </member>
        <member name="M:NKnife.Chinese.Spell.GetStringSpell(System.String,System.String)">
            <summary>
                将指定中文字符串转换为拼音形式。
            </summary>
            <param name="chs">要转换的中文字符串。</param>
            <param name="separator">连接拼音之间的分隔符。</param>
            <returns>包含中文字符串的拼音的字符串。</returns>
        </member>
        <member name="M:NKnife.Chinese.Spell.GetStringSpell(System.String,System.Boolean)">
            <summary>
                将指定中文字符串转换为拼音形式。
            </summary>
            <param name="chs">要转换的中文字符串。</param>
            <param name="initialCap">指定是否将首字母大写。</param>
            <returns>包含中文字符串的拼音的字符串。</returns>
        </member>
        <member name="M:NKnife.Chinese.Spell.GetStringSpell(System.String)">
            <summary>
                将指定中文字符串转换为拼音形式。
            </summary>
            <param name="chs">要转换的中文字符串。</param>
            <returns>包含中文字符串的拼音的字符串。</returns>
        </member>
        <member name="M:NKnife.Chinese.Spell.GetStringFirstSpell(System.String)">
            <summary>
                获取汉字字符串的拼音的首字母
            </summary>
            <param name="strText">汉字字符串</param>
            <returns>取得汉字字符串的拼音的首字母</returns>
        </member>
        <member name="M:NKnife.Chinese.Spell.GetCharFirstSpell(System.String)">
            <summary>
                获取汉字单个字符的拼音的首字母
            </summary>
            <param name="cnChar">汉字字符</param>
            <returns>取得汉字字符的拼音的首字母</returns>
        </member>
        <member name="T:NKnife.Chinese.SpellRandom">
            <summary>
            汉字拼音随机生成器
            </summary>
        </member>
        <member name="F:NKnife.Chinese.SpellRandom._Pinyins">
            <summary>
            包含汉字拼音的字符串数组。
            </summary>
        </member>
        <member name="P:NKnife.Chinese.SpellRandom.Randow">
            <summary>
            表示伪随机数生成器。静态属性。
            </summary>
        </member>
        <member name="M:NKnife.Chinese.SpellRandom.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:NKnife.Chinese.SpellRandom.GetPinyin(System.Int32)">
            <summary>
            获取几个拼音字符串数组
            </summary>
            <param name="num">获取的数量</param>
            <returns></returns>
        </member>
        <member name="T:NKnife.Collections.NotifySerializableMap`2">
            <summary>描述一个可序列化，且集合的内容发生改变时会发出通知的KeyValue的集合
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="T:NKnife.Collections.SerializableMap`2">
            <summary>描述一个可序列化的Map类型, 网上流传的SerializableDictionary偏于简单，细节考虑不够
            </summary>
            <typeparam name="TK">The type of the K.</typeparam>
            <typeparam name="TV">The type of the V.</typeparam>
        </member>
        <member name="T:NKnife.Collections.SyncQueue`1">
            <summary>一个同步安全的队列类型，内部包含一个AutoResetEvent，可通过该AutoResetEvent处理本队列的监听。
            </summary>
        </member>
        <member name="M:NKnife.Collections.SyncQueue`1.Enqueue(`0)">
            <summary>向队列中压入一条指定类型的数据
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:NKnife.Collections.SyncQueue`1.GetEnumerator">
            <summary>
            返回一个循环访问集合的枚举器。
            </summary>
            <returns>
            可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator"/> 对象。
            </returns>
        </member>
        <member name="M:NKnife.Collections.SyncQueue`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            从特定的 <see cref="T:System.Array"/> 索引处开始，将 <see cref="T:System.Collections.ICollection"/> 的元素复制到一个 <see cref="T:System.Array"/> 中。
            </summary>
            <param name="array">作为从 <see cref="T:System.Collections.ICollection"/> 复制的元素的目标位置的一维 <see cref="T:System.Array"/>。<see cref="T:System.Array"/> 必须具有从零开始的索引。</param>
            <param name="index"><paramref name="array"/> 中从零开始的索引，将在此处开始复制。</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="array"/> 为 null。</exception>
              
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="index"/> 小于零。</exception>
              
            <exception cref="T:System.ArgumentException">
              <paramref name="array"/> 是多维的。- 或 -源 <see cref="T:System.Collections.ICollection"/> 中的元素数目大于从 <paramref name="index"/> 到目标 <paramref name="array"/> 末尾之间的可用空间。</exception>
              
            <exception cref="T:System.ArgumentException">源 <see cref="T:System.Collections.ICollection"/> 的类型无法自动转换为目标 <paramref name="array"/> 的类型。</exception>
        </member>
        <member name="P:NKnife.Collections.SyncQueue`1.Count">
            <summary>
            获取 <see cref="T:System.Collections.ICollection"/> 中包含的元素数。
            </summary>
            <returns>
              <see cref="T:System.Collections.ICollection"/> 中包含的元素数。</returns>
        </member>
        <member name="P:NKnife.Collections.SyncQueue`1.System#Collections#ICollection#SyncRoot">
            <summary>
            获取一个可用于同步对 <see cref="T:System.Collections.ICollection"/> 的访问的对象。
            </summary>
            <returns>可用于同步对 <see cref="T:System.Collections.ICollection"/> 的访问的对象。</returns>
        </member>
        <member name="P:NKnife.Collections.SyncQueue`1.System#Collections#ICollection#IsSynchronized">
            <summary>
            获取一个值，该值指示是否同步对 <see cref="T:System.Collections.ICollection"/> 的访问（线程安全）。
            </summary>
            <returns>如果对 <see cref="T:System.Collections.ICollection"/> 的访问是同步的（线程安全），则为 true；否则为 false。</returns>
        </member>
        <member name="P:NKnife.CpuInfo.ProcessorId">
            <summary>CPU编号
            </summary>
        </member>
        <member name="P:NKnife.CpuInfo.CurrentVoltage">
            <summary>当前电压
            </summary>
        </member>
        <member name="P:NKnife.CpuInfo.ExtClock">
            <summary>外部频率
            </summary>
        </member>
        <member name="P:NKnife.CpuInfo.L2CacheSize">
            <summary>二级缓存尺寸
            </summary>
        </member>
        <member name="P:NKnife.CpuInfo.Manufacturer">
            <summary>制造商
            </summary>
        </member>
        <member name="P:NKnife.CpuInfo.Name">
            <summary>产品名称
            </summary>
        </member>
        <member name="P:NKnife.CpuInfo.Version">
            <summary>版本
            </summary>
        </member>
        <member name="P:NKnife.CpuInfo.LoadPercentage">
            <summary>当前使用百分比
            </summary>
        </member>
        <member name="P:NKnife.CpuInfo.MaxClockSpeed">
            <summary>最大时钟频率
            </summary>
        </member>
        <member name="P:NKnife.CpuInfo.CurrentClockSpeed">
            <summary>当前时钟频率
            </summary>
        </member>
        <member name="P:NKnife.CpuInfo.AddressWidth">
            <summary>CPU地址宽度
            </summary>
        </member>
        <member name="P:NKnife.CpuInfo.DataWidth">
            <summary>CPU数据宽度
            </summary>
        </member>
        <member name="P:NKnife.CpuInfo.CurrBaseBoard">
            <summary>主板相关信息
            </summary>
        </member>
        <member name="T:NKnife.CpuInfo.BaseBoard">
            <summary>主板相关信息
            </summary>
        </member>
        <member name="P:NKnife.CpuInfo.BaseBoard.Manufacturer">
            <summary>主板制造商
            </summary>
        </member>
        <member name="P:NKnife.CpuInfo.BaseBoard.Product">
            <summary>产品
            </summary>
        </member>
        <member name="P:NKnife.CpuInfo.BaseBoard.SerialNumber">
            <summary>主板序列号
            </summary>
        </member>
        <member name="M:NKnife.Encrypt.FileMd5.AddMd5(System.String)">
            <summary>
                对给定文件路径的文件加上标签
            </summary>
            <param name="path">要加密的文件的路径</param>
            <returns>标签的值</returns>
        </member>
        <member name="M:NKnife.Encrypt.FileMd5.CheckMd5(System.String)">
            <summary>
                对给定路径的文件进行验证
            </summary>
            <param name="path"></param>
            <returns>是否加了标签或是否标签值与内容值一致</returns>
        </member>
        <member name="M:NKnife.Encrypt.FileMd5.Md5Buffer(System.Byte[],System.Int32,System.Int32)">
            <summary>
                计算文件的MD5值
            </summary>
            <param name="md5File">MD5签名文件字符数组</param>
            <param name="index">计算起始位置</param>
            <param name="count">计算终止位置</param>
            <returns>计算结果</returns>
        </member>
        <member name="T:NKnife.Encrypt.RsaEncryption">
            <summary>
                RSA加密解密及RSA签名和验证
            </summary>
        </member>
        <member name="M:NKnife.Encrypt.RsaEncryption.RsaKey(System.String@,System.String@)">
            <summary>
                RSA 的密钥产生 产生私钥 和公钥
            </summary>
            <param name="xmlKeys"></param>
            <param name="xmlPublicKey"></param>
        </member>
        <member name="M:NKnife.Encrypt.RsaEncryption.RsaEncrypt(System.String,System.String)">
            <summary>
                RSA的加密函数  string
            </summary>
        </member>
        <member name="M:NKnife.Encrypt.RsaEncryption.RsaEncrypt(System.String,System.Byte[])">
            <summary>
                RSA的加密函数 byte[]
            </summary>
        </member>
        <member name="M:NKnife.Encrypt.RsaEncryption.RsaDecrypt(System.String,System.String)">
            <summary>
                RSA的解密函数  string
            </summary>
        </member>
        <member name="M:NKnife.Encrypt.RsaEncryption.RsaDecrypt(System.String,System.Byte[])">
            <summary>
                RSA的解密函数  byte
            </summary>
        </member>
        <member name="M:NKnife.Encrypt.RsaEncryption.GetHash(System.String,System.Byte[]@)">
            <summary>
                获取Hash描述表
            </summary>
        </member>
        <member name="M:NKnife.Encrypt.RsaEncryption.GetHash(System.String,System.String@)">
            <summary>
                获取Hash描述表
            </summary>
        </member>
        <member name="M:NKnife.Encrypt.RsaEncryption.GetHash(System.IO.FileStream,System.Byte[]@)">
            <summary>
                获取Hash描述表
            </summary>
        </member>
        <member name="M:NKnife.Encrypt.RsaEncryption.GetHash(System.IO.FileStream,System.String@)">
            <summary>
                获取Hash描述表
            </summary>
        </member>
        <member name="M:NKnife.Encrypt.RsaEncryption.SignatureFormatter(System.String,System.Byte[],System.Byte[]@)">
            <summary>
                RSA签名
            </summary>
        </member>
        <member name="M:NKnife.Encrypt.RsaEncryption.SignatureFormatter(System.String,System.Byte[],System.String@)">
            <summary>
                RSA签名
            </summary>
        </member>
        <member name="M:NKnife.Encrypt.RsaEncryption.SignatureFormatter(System.String,System.String,System.Byte[]@)">
            <summary>
                RSA签名
            </summary>
        </member>
        <member name="M:NKnife.Encrypt.RsaEncryption.SignatureFormatter(System.String,System.String,System.String@)">
            <summary>
                RSA签名
            </summary>
        </member>
        <member name="T:NKnife.Encrypt.SimpleCipher">
            <summary>
                简单加密类
            </summary>
        </member>
        <member name="M:NKnife.Encrypt.SoftwareSn.GetSn(System.String)">
            <summary>
            一个非常简单的通过取余计算注册码的方法
            </summary>
            <param name="str">The STR.</param>
            <returns></returns>
        </member>
        <member name="M:NKnife.Encrypt.TripleDesHelper.Encrypt(System.String,System.String,System.Boolean)">
            <summary>
            加密
            </summary>
            <param name="toEncrypt">要加密的字符串，即明文</param>
            <param name="key">公共密钥</param>
            <param name="useHashing">是否使用MD5生成机密秘钥</param>
            <returns>加密后的字符串，即密文</returns>
        </member>
        <member name="M:NKnife.Encrypt.TripleDesHelper.Decrypt(System.String,System.String,System.Boolean)">
            <summary>
            解密
            </summary>
            <param name="toDecrypt">要解密的字符串，即密文</param>
            <param name="key">公共密钥</param>
            <param name="useHashing">是否使用MD5生成机密密钥</param>
            <returns>解密后的字符串，即明文</returns>
        </member>
        <member name="T:NKnife.Encrypt.UtilityEncrypt">
            <summary>
                针对加解密方法的扩展
                2009-12-17 17:56:04
            </summary>
        </member>
        <member name="F:NKnife.Encrypt.UtilityEncrypt.DefaultKey">
            <summary>
                本框架设定的缺省密钥字符串，只读状态。一般不建议使用。
            </summary>
        </member>
        <member name="F:NKnife.Encrypt.UtilityEncrypt.Keys">
            <summary>
                默认密钥向量
            </summary>
        </member>
        <member name="M:NKnife.Encrypt.UtilityEncrypt.GenerateKey">
            <summary>
                自动生成一个密钥。
            </summary>
            <returns>返回生成的密钥</returns>
        </member>
        <member name="M:NKnife.Encrypt.UtilityEncrypt.Md5Encrypt(System.String)">
            <summary>
                计算输入数据的 MD5 哈希值
            </summary>
            <param name="strIn">输入的数据.</param>
            <returns></returns>
        </member>
        <member name="M:NKnife.Encrypt.UtilityEncrypt.Sha1Encrypt(System.String)">
            <summary>
                计算输入数据的 SHA1 哈希值
            </summary>
            <param name="strIn">输入的数据.</param>
            <returns></returns>
        </member>
        <member name="M:NKnife.Encrypt.UtilityEncrypt.Sha256Encrypt(System.String)">
            <summary>
                计算输入数据的 SHA256 哈希值
            </summary>
            <param name="strIn">输入的数据.</param>
            <returns></returns>
        </member>
        <member name="M:NKnife.Encrypt.UtilityEncrypt.Sha512Encrypt(System.String)">
            <summary>
                计算输入数据的 SHA512 哈希值
            </summary>
            <param name="strIn">输入的数据.</param>
            <returns></returns>
        </member>
        <member name="M:NKnife.Encrypt.UtilityEncrypt.BytesToString(System.Byte[])">
            <summary>
                将字节型数组转换成数字
            </summary>
            <param name="byteValue">The byte value.</param>
            <returns></returns>
        </member>
        <member name="M:NKnife.Encrypt.UtilityEncrypt.StringToBytes(System.String)">
            <summary>
                将Key字符串转换为字节型数组
            </summary>
            <param name="strKey">The STR key.</param>
            <returns></returns>
        </member>
        <member name="M:NKnife.Encrypt.UtilityEncrypt.DesEncrypt(System.String,System.String)">
            <summary>
                获取用DES方法加密 [一个指定的待加密的字符串] 后的字符串
            </summary>
            <param name="encryptString">一个指定的待加密的字符串</param>
            <param name="encryptKey">加密密钥,要求为8位</param>
            <returns>加密成功返回加密后的字符串,失败返回源串</returns>
        </member>
        <member name="M:NKnife.Encrypt.UtilityEncrypt.DesDecrypt(System.String,System.String)">
            <summary>
                DES解密字符串
            </summary>
            <param name="decryptString">待解密的字符串</param>
            <param name="decryptKey">解密密钥,要求为8位,和加密密钥相同</param>
            <returns>解密成功返回解密后的字符串,失败返源串</returns>
        </member>
        <member name="M:NKnife.Encrypt.UtilityEncrypt.EncryptFile(System.String,System.String,System.String)">
            <summary>
                加密文件
            </summary>
            <param name="sInputFilename">要加密的文件</param>
            <param name="sOutputFilename">加密后保存的文件</param>
            <param name="sKey">密钥</param>
        </member>
        <member name="M:NKnife.Encrypt.UtilityEncrypt.DecryptFile(System.String,System.String,System.String)">
            <summary>
                解密文件
            </summary>
            <param name="sInputFilename">要解密的文件</param>
            <param name="sOutputFilename">解决后保存的文件</param>
            <param name="sKey">密钥</param>
        </member>
        <member name="M:NKnife.Encrypt.UtilityEncrypt.DecryptFile(System.String,System.String)">
            <summary>
                解密文件
            </summary>
            <param name="sInputFilename">要解密的文件路径</param>
            <param name="sKey">密钥</param>
            <returns>返回内容</returns>
        </member>
        <member name="T:NKnife.Endianness">
            <summary>
            在计算机系统中，地址是以字节为单位的，每个地址单元都对应着一个字节，一个字节为8bit。
            但是在C语言中除了一个字节（8bit）的char之外，还有两个字节（16bit）的short型等超过一个字节的数据类型。
            另外，对于位数大于8位的处理器，由于寄存器宽度大于一个字节。所以必然存在如何将多个字节安排的问题，因此就有了大端存储模式和小端存储模式。<br/>
            机器A和B通信，如果A和B的端序都是一样的话，中间无需转换。
            但是如果A和B机器的端序不一样，如果不做转换，传输的二进制序列就是反的。<br/>
            c51是大端模式。<br/>
            STM32是用小端模式。<br/>
            * https://zhuanlan.zhihu.com/p/21388517 <br/>
            * https://www.jianshu.com/p/5ac6e858e1a4 <br/>
            * https://zhuanlan.zhihu.com/p/35661391
            </summary>
        </member>
        <member name="F:NKnife.Endianness.LE">
            <summary>
            小端模式。是指数据的高字节保存在内存的高地址中，而数据的低字节保存在内存的低地址中，
            这种存储模式将地址的高低和数据位权有效地结合起来，高地址部分权值高，低地址部分权值低。
            </summary>
        </member>
        <member name="F:NKnife.Endianness.BE">
            <summary>
            大端模式。是指数据的高字节保存在内存的低地址中，而数据的低字节保存在内存的高地址中，
            这样的存储模式有点儿类似于把数据当作字符串顺序处理：地址由小向大增加，而数据从高位往低位放；这和我们的阅读习惯一致。
            </summary>
        </member>
        <member name="F:NKnife.Endianness.LittleEndian">
            <summary>
            小端模式。是指数据的高字节保存在内存的高地址中，而数据的低字节保存在内存的低地址中，
            这种存储模式将地址的高低和数据位权有效地结合起来，高地址部分权值高，低地址部分权值低。
            </summary>
        </member>
        <member name="F:NKnife.Endianness.BigEndian">
            <summary>
            大端模式。是指数据的高字节保存在内存的低地址中，而数据的低字节保存在内存的高地址中，
            这样的存储模式有点儿类似于把数据当作字符串顺序处理：地址由小向大增加，而数据从高位往低位放；这和我们的阅读习惯一致。
            </summary>
        </member>
        <member name="P:NKnife.Events.ChangedEventArgs`1.OldItem">
            <summary>
            改变前的值
            </summary>
        </member>
        <member name="P:NKnife.Events.ChangedEventArgs`1.NewItem">
            <summary>
            改变后的值
            </summary>
        </member>
        <member name="T:NKnife.Exceptions.NKnifeException">
            <summary>
                NKnife的的基础异常类，所有的异常从本类派生
            </summary>
        </member>
        <member name="F:NKnife.Exceptions.NKnifeException._ErrorNo">
            <summary>
                异常编号
            </summary>
        </member>
        <member name="M:NKnife.Exceptions.NKnifeException.#ctor">
            <summary>
                构造函数
            </summary>
        </member>
        <member name="M:NKnife.Exceptions.NKnifeException.#ctor(System.String,System.Exception)">
            <summary>
                构造函数
            </summary>
            <param name="message">异常消息</param>
            <param name="innerException">内部异常</param>
        </member>
        <member name="M:NKnife.Exceptions.NKnifeException.#ctor(System.String)">
            <summary>
                构造函数
            </summary>
            <param name="message">异常消息</param>
        </member>
        <member name="M:NKnife.Exceptions.NKnifeException.#ctor(System.Int32,System.String)">
            <summary>
                构造函数
            </summary>
            <param name="errorNo">异常编号</param>
            <param name="message">异常消息</param>
        </member>
        <member name="M:NKnife.Exceptions.NKnifeException.#ctor(System.Int32,System.String,System.Exception)">
            <summary>
                构造函数
            </summary>
            <param name="errorNo">异常编号</param>
            <param name="message">异常消息</param>
            <param name="innerException">内部异常</param>
        </member>
        <member name="P:NKnife.Exceptions.NKnifeException.ErrorNo">
            <summary>
                异常编号
            </summary>
        </member>
        <member name="M:NKnife.Exceptions.NKnifeException.FindSourceException(System.Exception)">
            <summary>
                查找原始的异常
            </summary>
            <param name="e">异常</param>
            <returns>原始的异常</returns>
        </member>
        <member name="M:NKnife.Exceptions.NKnifeException.FindSourceException(System.Exception,System.Type)">
            <summary>
                从异常树种查找指定类型的异常
            </summary>
            <param name="e">异常</param>
            <param name="expectedExceptionType">期待的异常类型</param>
            <returns>所要求的异常，如果找不到，返回null</returns>
        </member>
        <member name="T:NKnife.Exceptions.TypeConvertingException">
            <summary>
            类型转换异常
            </summary>
        </member>
        <member name="T:NKnife.Extensions.DateTimes.CountOfMonth">
            <summary>描述某月中的第几周的第几天，如果是第0周，那么 Count 属性描述的是该月的第几天
            </summary>
        </member>
        <member name="P:NKnife.Extensions.DateTimes.CountOfMonth.WeekNumber">
            <summary>描述当月的第几周，如果是第0周，那么 Count 属性描述的是该月的第几天
            </summary>
            <value>The week number.</value>
        </member>
        <member name="P:NKnife.Extensions.DateTimes.CountOfMonth.Count">
            <summary>第几天
            </summary>
            <value>The count.</value>
        </member>
        <member name="M:NKnife.Extensions.DateTimes.CountOfMonth.Matching(System.DateTime)">
            <summary>是否匹配指定的日期
            </summary>
            <param name="dt">The dt.</param>
            <returns></returns>
        </member>
        <member name="M:NKnife.Extensions.DateTimes.FluentTimeSpan.Equals(NKnife.Extensions.DateTimes.FluentTimeSpan)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            <c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NKnife.Extensions.DateTimes.FluentTimeSpan.Add(NKnife.Extensions.DateTimes.FluentTimeSpan)">
            <summary>
            Adds two fluentTimeSpan according operator +.
            </summary>
            <param name="number">The number to add to this fluentTimeSpan.</param>
            <returns>The result of the addition operation.</returns>
        </member>
        <member name="M:NKnife.Extensions.DateTimes.FluentTimeSpan.Subtract(NKnife.Extensions.DateTimes.FluentTimeSpan)">
            <summary>Subtracts the number according -.
            </summary>
            <param name="fluentTimeSpan">The matrix to subtract from this fluentTimeSpan.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:NKnife.Extensions.DateTimes.FluentTimeSpan.op_Addition(NKnife.Extensions.DateTimes.FluentTimeSpan,NKnife.Extensions.DateTimes.FluentTimeSpan)">
            <summary>Overload of the operator + 
            </summary>
            <param name="left">The left hand fluentTimeSpan.</param>
            <param name="right">The right hand fluentTimeSpan.</param>
            <returns>The result of the addition.</returns>
        </member>
        <member name="M:NKnife.Extensions.DateTimes.FluentTimeSpan.op_Subtraction(NKnife.Extensions.DateTimes.FluentTimeSpan,NKnife.Extensions.DateTimes.FluentTimeSpan)">
            <summary>Overload of the operator - 
            </summary>
            <param name="left">The left hand fluentTimeSpan.</param>
            <param name="right">The right hand fluentTimeSpan.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:NKnife.Extensions.DateTimes.FluentTimeSpan.op_Equality(NKnife.Extensions.DateTimes.FluentTimeSpan,NKnife.Extensions.DateTimes.FluentTimeSpan)">
            <summary>Equals operator.
            </summary>
            <param name="left">The left hand side.</param>
            <param name="right">The right hand side.</param>
            <returns><c>true</c> is <paramref name="left"/> is equal to <paramref name="right"/>; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:NKnife.Extensions.DateTimes.FluentTimeSpan.op_Inequality(NKnife.Extensions.DateTimes.FluentTimeSpan,NKnife.Extensions.DateTimes.FluentTimeSpan)">
            <summary>
            Not Equals operator.
            </summary>
            <param name="left">The left hand side.</param>
            <param name="right">The right hand side.</param>
            <returns><c>true</c> is <paramref name="left"/> is not equal to <paramref name="right"/>; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:NKnife.Extensions.DateTimes.FluentTimeSpan.op_Implicit(NKnife.Extensions.DateTimes.FluentTimeSpan)~System.TimeSpan">
            <summary>
            Performs an explicit conversion from <see cref="T:NKnife.Extensions.DateTimes.FluentTimeSpan"/> to <see cref="P:NKnife.Extensions.DateTimes.FluentTimeSpan.TimeSpan"/>.
            </summary>
            <param name="fluentTimeSpan">The FluentTimeSpan.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:NKnife.Extensions.DateTimes.FluentTimeSpan.op_Implicit(System.TimeSpan)~NKnife.Extensions.DateTimes.FluentTimeSpan">
            <summary>
            Performs an implicit conversion from a <see cref="P:NKnife.Extensions.DateTimes.FluentTimeSpan.TimeSpan"/> to <see cref="T:NKnife.Extensions.DateTimes.FluentTimeSpan"/>.
            </summary>
            <param name="timeSpan">The <see cref="P:NKnife.Extensions.DateTimes.FluentTimeSpan.TimeSpan"/> that will be converted.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:NKnife.Extensions.DateTimes.FluentTimeSpan.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:NKnife.Extensions.DateTimes.FluentTimeSpan.ToString">
            <inheritdoc />
        </member>
        <member name="M:NKnife.Extensions.DateTimes.FluentTimeSpan.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:NKnife.Extensions.DateTimes.FluentTimeSpan.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:NKnife.Extensions.DateTimes.FluentTimeSpan.SubtractInternal(NKnife.Extensions.DateTimes.FluentTimeSpan,NKnife.Extensions.DateTimes.FluentTimeSpan)">
            <summary>
            Internal subtraction function for the subtraction of fluentTimeSpans.
            </summary>
            <param name="left">The left hand side.</param>
            <param name="right">The right hand side.</param>
        </member>
        <member name="T:NKnife.Global">
            <summary>
                软件全局属性设置静态类。类中的属性供软件整体调用。
            </summary>
        </member>
        <member name="P:NKnife.Global.Culture">
            <summary>
                当前软件的文化语言标记
            </summary>
        </member>
        <member name="E:NKnife.Global.CultureChanged">
            <summary>
            当当前软件的文化语言标记的设置值发生变化时
            </summary>
        </member>
        <member name="T:NKnife.HabitData">
            <summary>
                描述用户习惯的数据，这是一个保存用户目录下的数据文件，该文件可以不存在，当使用时发现该文件不存在时，将创建，并创建默认值。
            </summary>
        </member>
        <member name="P:NKnife.HabitData.Document">
            <summary>
                将本选项文件所对应的XML文件
            </summary>
            <value>The document.</value>
        </member>
        <member name="P:NKnife.HabitData.FileName">
            <summary>
                本选项面向的持久化文件
            </summary>
            <value>The name of the file.</value>
        </member>
        <member name="P:NKnife.HabitData.UserApplicationDataPath">
            <summary>
                用作当前非漫游用户使用的应用程序特定数据的公共储存库路径。
            </summary>
            <value>The user application data path.</value>
        </member>
        <member name="M:NKnife.HabitData.TryGetValue(System.String,System.Object@)">
            <summary>
                尝试按指定的名称获取选项值
            </summary>
            <param name="localName">The localName.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:NKnife.HabitData.GetValue(System.String,System.Object)">
            <summary>
                按指定的名称获取选项值，如果该值无法获取，将保存指定的默认值
            </summary>
            <param name="localName">The localName.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:NKnife.HabitData.SetValue(System.String,System.Object)">
            <summary>
                按指定的名称设置值
            </summary>
            <param name="localName">The localName.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:NKnife.HabitData.Load">
            <summary>
                加载选项文件
            </summary>
        </member>
        <member name="M:NKnife.HabitData.Save">
            <summary>
                持久化选项文件
            </summary>
        </member>
        <member name="M:NKnife.HabitData.GetElement(System.String)">
            <summary>
                获取指定名称的XmlElement，如果不存在，将创建
            </summary>
            <param name="localName">The localName.</param>
            <returns></returns>
        </member>
        <member name="T:NKnife.IdGenerator">
            <summary>
                ID生成器。本生成器主要思想是将当前时间中的年月日时分替换成一个在当年不可重复的4位（大写字母与数字）字符串标识，
                这样相对存储长格式时间字符串以及GUID方法来讲，可以大大减少存储空间。
                * 本类可以直接使用。
                * 本类线程是安全的。
                * 本类直接使用时，以每6秒为单位，假定每6秒全局生成记录不超过100条，这样全局记录将不会重复。
                * 如应用负载较大时请重写GetSecond与GetCount方法。
                * 2010-01-18 11:36:29
                经比较，ID生成效率大约为如下所示：
                NKnife的Id生成器生成500万个ID需要时间（毫秒）： 26090，每秒生成：191000
                随机数字生成500万个ID需要时间（毫秒）： 2726，每秒生成：1834000
                随机4位小写字母生成500万个ID需要时间（毫秒）： 43732，每秒生成：114000
                数字累加生成500万个ID需要时间（毫秒）： 2399，每秒生成：2084000
                Hibernate的UUIDGenerator生成生成500万个ID需要时间（毫秒）： 60331，每秒生成：82000
                Guid生成500万个ID需要时间（毫秒）： 5182，每秒生成：964000
            </summary>
        </member>
        <member name="F:NKnife.IdGenerator._Counter">
            <summary>
                累计数，消除当以秒为单位时出现重复的可能。
            </summary>
        </member>
        <member name="F:NKnife.IdGenerator._TimeFlag">
            <summary>
                将当前时间中的年月日时分替换成一个在当年里不可重复的4位（大写字母与数字）字符串标识。
            </summary>
        </member>
        <member name="M:NKnife.IdGenerator.#cctor">
            <summary>
                静态构造函数。
            </summary>
        </member>
        <member name="P:NKnife.IdGenerator.UserFlag">
            <summary>
                获得一个用户标志符，默认为空。可在子类中重写输出。
            </summary>
            <returns></returns>
        </member>
        <member name="P:NKnife.IdGenerator.SequenceName">
            <summary>
                获得一个序列名，默认为空。可在子类中重写输出。
            </summary>
            <returns></returns>
        </member>
        <member name="M:NKnife.IdGenerator.Generate">
            <summary>
                主方法。根据当前类的输出规则生成一个全局不重复的ID。
            </summary>
            <returns>一个全局不重复的ID字符串</returns>
        </member>
        <member name="M:NKnife.IdGenerator.FillTimeFLag">
            <summary>
                填充时间标识符数组
            </summary>
        </member>
        <member name="M:NKnife.IdGenerator.GetDateTimeFlag">
            <summary>
                获得一个时间标志符（4位）。年份标识追加在标志符后,默认是当前年份距2010年的相差数+1。可在子类中重写输出。
            </summary>
            <returns></returns>
        </member>
        <member name="M:NKnife.IdGenerator.GetSecond">
            <summary>
                获得当前时间的秒除以10的值，即以每6秒为一组计时单位。可在子类中重写输出。
            </summary>
            <returns></returns>
        </member>
        <member name="M:NKnife.IdGenerator.GetCount">
            <summary>
                获得一个累计数，以消除当以秒为单位时出现重复的可能。默认是2位。
                可在子类中重写输出。
            <code>
            int n = 4; //希望仅出现4位计数标志
            if (_counter &gt; GetMaxCount(n) - 1)
                _counter++;
            else
                _counter = 1;
            return $"{_counter}".PadLeft(n, '0');
            </code>
            </summary>
            <returns></returns>
        </member>
        <member name="M:NKnife.IdGenerator.GetMaxCount(System.Int32)">
            <summary>
                Gets the max count.
            </summary>
        </member>
        <member name="M:NKnife.Interface.Datas.NoSql.ICrudRepository`2.Save(`0)">
            <summary>
                存储一条Document，可能是新建或者修改
            </summary>
            <returns>当是新document时，插入，返加true；当是已有document时，更新，且返回false。</returns>
        </member>
        <member name="M:NKnife.Interface.Datas.NoSql.ICrudRepository`2.Save(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Saves all given entities.
            </summary>
            <returns>return the saved entities count</returns>
        </member>
        <member name="M:NKnife.Interface.Datas.NoSql.ICrudRepository`2.FindOne(`1)">
            <summary>
            Retrieves an entity by its id.
            </summary>
        </member>
        <member name="M:NKnife.Interface.Datas.NoSql.ICrudRepository`2.Exists(`1)">
            <summary>
            Returns whether an entity with the given id exists.
            </summary>
        </member>
        <member name="M:NKnife.Interface.Datas.NoSql.ICrudRepository`2.FindAll">
            <summary>
            Returns all instances of the type.
            </summary>
        </member>
        <member name="M:NKnife.Interface.Datas.NoSql.ICrudRepository`2.FindAll(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Returns all instances of the type with the given IDs.
            </summary>
        </member>
        <member name="M:NKnife.Interface.Datas.NoSql.ICrudRepository`2.FindAll(System.Collections.Generic.IComparer{`0})">
            <summary>
            Returns all entities sorted by the given options.
            </summary>
        </member>
        <member name="M:NKnife.Interface.Datas.NoSql.ICrudRepository`2.FindAll(System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IComparer{`0})">
            <summary>
            Returns all entities sorted by the given options.
            </summary>
        </member>
        <member name="P:NKnife.Interface.Datas.NoSql.ICrudRepository`2.Count">
            <summary>
            Returns the number of entities available.
            </summary>
        </member>
        <member name="M:NKnife.Interface.Datas.NoSql.ICrudRepository`2.Delete(`1)">
            <summary>
            Deletes the entity with the given id.
            </summary>
            <param name="id">id must not be null</param>
        </member>
        <member name="M:NKnife.Interface.Datas.NoSql.ICrudRepository`2.DeleteAll">
            <summary>
            Deletes all entities managed by the repository.
            </summary>
        </member>
        <member name="T:NKnife.Interface.Datas.NoSql.IPage`1">
            <summary>
                这是一个描述捕获分页请求后的处理结果及元信息。
                分页请求的处理结果一般来讲是所有Document的总集列表的子集列表。同时，允许获取该集合的相关信息。
            </summary>
        </member>
        <member name="P:NKnife.Interface.Datas.NoSql.IPage`1.Content">
            <summary>
                当前页的处理结果。即项目的集合。
            </summary>
        </member>
        <member name="P:NKnife.Interface.Datas.NoSql.IPage`1.Number">
            <summary>
                当前页码
            </summary>
        </member>
        <member name="P:NKnife.Interface.Datas.NoSql.IPage`1.Size">
            <summary>
                当前页中的期望项目数量
            </summary>
        </member>
        <member name="P:NKnife.Interface.Datas.NoSql.IPage`1.SizeOfElements">
            <summary>
                当前页中的实际项目数量，因查询条件或尾页等原因，有可能小于期望项目数量
            </summary>
        </member>
        <member name="P:NKnife.Interface.Datas.NoSql.IPage`1.HasContent">
            <summary>
                是否有结果。
            </summary>
        </member>
        <member name="P:NKnife.Interface.Datas.NoSql.IPage`1.IsFirst">
            <summary>
                是否是首页
            </summary>
        </member>
        <member name="P:NKnife.Interface.Datas.NoSql.IPage`1.IsLast">
            <summary>
                是否是尾页
            </summary>
        </member>
        <member name="P:NKnife.Interface.Datas.NoSql.IPage`1.HasNext">
            <summary>
                是否有下一页
            </summary>
        </member>
        <member name="P:NKnife.Interface.Datas.NoSql.IPage`1.HasPrevious">
            <summary>
                是否有上一页
            </summary>
        </member>
        <member name="P:NKnife.Interface.Datas.NoSql.IPage`1.NextPageable">
            <summary>
                依据当前页创建下一页的请求
            </summary>
        </member>
        <member name="P:NKnife.Interface.Datas.NoSql.IPage`1.PreviousPageable">
            <summary>
                依据当前页创建上一页的请求
            </summary>
        </member>
        <member name="P:NKnife.Interface.Datas.NoSql.IPage`1.Comparer">
            <summary>
                排序比较器
            </summary>
        </member>
        <member name="P:NKnife.Interface.Datas.NoSql.IPage`1.TotalPages">
            <summary>
                总页数
            </summary>
        </member>
        <member name="P:NKnife.Interface.Datas.NoSql.IPage`1.TotalElements">
            <summary>
                合计总的项目数量。一般来讲，应在处理分页请求后，将集合的Count数量给入。
            </summary>
        </member>
        <member name="T:NKnife.Interface.Datas.NoSql.IPageable`1">
            <summary>
               这是一个描述分页请求的接口
            </summary>
        </member>
        <member name="P:NKnife.Interface.Datas.NoSql.IPageable`1.PageNumber">
            <summary>
                页码。索引从0开始。
            </summary>
        </member>
        <member name="P:NKnife.Interface.Datas.NoSql.IPageable`1.PageSize">
            <summary>
                当前页中的项目数量
            </summary>
        </member>
        <member name="P:NKnife.Interface.Datas.NoSql.IPageable`1.Offset">
            <summary>
                当本次请求结束后在总记录中的偏移量。
            </summary>
        </member>
        <member name="P:NKnife.Interface.Datas.NoSql.IPageable`1.Comparer">
            <summary>
                当前将要被使用的用于排序的比较器
            </summary>
        </member>
        <member name="M:NKnife.Interface.Datas.NoSql.IPageable`1.First">
            <summary>
                基于本次请求返回一个“首页”的新请求<see cref="!:IPageable"/>。
            </summary>
        </member>
        <member name="M:NKnife.Interface.Datas.NoSql.IPageable`1.Next">
            <summary>
                基于本次请求返回一个“下一页”的新请求<see cref="!:IPageable"/>。
            </summary>
        </member>
        <member name="M:NKnife.Interface.Datas.NoSql.IPageable`1.Previous">
            <summary>
                基于本次请求返回一个“上一页”的新请求<see cref="!:IPageable"/>。
            </summary>
        </member>
        <member name="M:NKnife.Interface.Datas.NoSql.IPageable`1.PreviousOrFirst">
            <summary>
                基于本次请求返回一个“上一页”的新请求<see cref="!:IPageable"/>，如果“上一页”是第一页时，返回“首页”请求。
            </summary>
        </member>
        <member name="P:NKnife.Interface.Datas.NoSql.IPageable`1.HasPrevious">
            <summary>
                是否有“上一页”，即当前页是否是“首页”
            </summary>
        </member>
        <member name="P:NKnife.Interface.Datas.NoSql.IPageable`1.Predicate">
            <summary>
                分页的查询条件
            </summary>
        </member>
        <member name="T:NKnife.Interface.Datas.NoSql.IPagingAndSortingRepository`2">
            <summary>
            Extension of <see cref="T:NKnife.Interface.Datas.NoSql.ICrudRepository`2"/> to provide additional methods to retrieve entities using the pagination and sorting abstraction.
            </summary>
            <typeparam name="T">实体</typeparam>
            <typeparam name="TId">实体的ID的类型</typeparam>
        </member>
        <member name="M:NKnife.Interface.Datas.NoSql.IPagingAndSortingRepository`2.FindMulti(NKnife.Interface.Datas.NoSql.IPageable{`0})">
            <summary>
            Returns a <see cref="T:NKnife.Interface.Datas.NoSql.IPage`1"/> of entities meeting the paging restriction provided in the <see cref="T:NKnife.Interface.Datas.NoSql.IPageable`1"/> object.
            </summary>
        </member>
        <member name="T:NKnife.Interface.IEnvironmentItem">
            <summary>应用程序启动时需加载的各种服务(环境)
            </summary>
        </member>
        <member name="P:NKnife.Interface.IEnvironmentItem.Order">
            <summary>启动的顺序，值越大将越先启动
            </summary>
            <value>The order.</value>
        </member>
        <member name="M:NKnife.Interface.IEnvironmentItem.StartService">
            <summary>启动服务
            </summary>
        </member>
        <member name="M:NKnife.Interface.IEnvironmentItem.CloseService">
            <summary>关闭服务，关闭服务将会按照启动的顺序反向关闭
            </summary>
        </member>
        <member name="P:NKnife.Interface.IEnvironmentItem.Description">
            <summary>服务的描述
            </summary>
            <value>The description.</value>
        </member>
        <member name="T:NKnife.Interface.IGenerator">
            <summary>
            一个描述该类型能够生成指定字符串的接口。
            一般都与IParse配对使用。
            </summary>
        </member>
        <member name="T:NKnife.Interface.IId">
            <summary>
            描述一个有ID的对象
            </summary>
        </member>
        <member name="P:NKnife.Interface.IId.Id">
            <summary>
            对象的ID
            </summary>
        </member>
        <member name="T:NKnife.Interface.IIdGenerator">
            <summary>
            定义一个全局ID生成器的接口
            </summary>
        </member>
        <member name="M:NKnife.Interface.IIdGenerator.Generate">
            <summary>
            根据当前类的输出规则生成一个全局不重复的ID。
            </summary>
            <returns>一个全局不重复的ID字符串</returns>
        </member>
        <member name="T:NKnife.Interface.IInitializer">
            <summary>当一个类型需要初始化时
            </summary>
        </member>
        <member name="P:NKnife.Interface.IInitializer.IsInitialized">
            <summary>是否已经初始化
            </summary>
        </member>
        <member name="M:NKnife.Interface.IInitializer.Initialize(System.Object[])">
            <summary>执行初始化动作
            </summary>
            <param name="args">初始化的动作参数</param>
        </member>
        <member name="E:NKnife.Interface.IInitializer.InitializedEvent">
            <summary>初始化完成时发生的事件
            </summary>
        </member>
        <member name="P:NKnife.Interface.IJob.Interval">
            <summary>
            间隔时长
            </summary>
        </member>
        <member name="P:NKnife.Interface.IJob.Timeout">
            <summary>
            当工作异常时，需要等待的时长。
            当设置该时长时，一定要比间隔时长要长；否则无论是否发生工作异常，本工作都将在间隔时长达到时结束工作。
            </summary>
        </member>
        <member name="P:NKnife.Interface.IJob.IsLoop">
            <summary>
            是否需要循环
            </summary>
        </member>
        <member name="P:NKnife.Interface.IJob.LoopCount">
            <summary>
            循环执行的次数。当本值小于等于0时，如果需要循环，将无限循环下去。
            </summary>
        </member>
        <member name="P:NKnife.Interface.IJob.CountOfCompleted">
            <summary>
            已完成的循环次数
            </summary>
        </member>
        <member name="P:NKnife.Interface.IJob.Run">
            <summary>
            注入本工作的执行方法。返回true表明执行完成；false反之，可能出现了执行异常，例如，发送对话请求后，未得到远端回应。
            </summary>
        </member>
        <member name="P:NKnife.Interface.IJob.Verify">
            <summary>
            验证本工作的结果是否正确。
            </summary>
        </member>
        <member name="P:NKnife.Interface.IJobPool.IsOverall">
            <summary>
            工作池中的子工作轮循模式，当True时，会循环执行整个池中的所有子工作；当False时，对每项子工作都会执行完毕，才执行下一个工作。
            </summary>
        </member>
        <member name="M:NKnife.Interface.IJobPool.AddRange(System.Collections.Generic.IEnumerable{NKnife.Interface.IJobPoolItem})">
            <summary>
            向集合中添加子工作集合
            </summary>
        </member>
        <member name="T:NKnife.Interface.IJobPoolItem">
            <summary>
            描述一个可以被加入到工作集合的子项目
            </summary>
        </member>
        <member name="P:NKnife.Interface.IJobPoolItem.IsPool">
            <summary>
            是否是工作集合，通过这个特点，以保证工作集合的树状
            </summary>
        </member>
        <member name="T:NKnife.Interface.IParse">
            <summary>
            一个描述能够针对字符串解析类型的接口。
            一般都与IGenerator配对使用。
            </summary>
        </member>
        <member name="T:NKnife.Interface.IParser`2">
            <summary>
            一个描述解析器的接口，一般情况下，实现类通常做为某种解析器使用。
            </summary>
            <typeparam name="TSource">被解析数据源的类型</typeparam>
            <typeparam name="TResult">将要解析出来的数据的类型</typeparam>
        </member>
        <member name="M:NKnife.Interface.IParser`2.TryParse(`0,`1@)">
            <summary>
            解析器的核心方法。对数据进行解析。
            </summary>
            <param name="source">数据源</param>
            <param name="result">解析后的数据结果</param>
            <returns>是否解析成功</returns>
        </member>
        <member name="T:NKnife.Interface.IService">
            <summary>
            一个描述应用程序服务的接口
            </summary>
        </member>
        <member name="M:NKnife.Interface.IService.SetServiceParams(System.Object[])">
            <summary>
            设置服务参数
            </summary>
            <param name="objects">初始化服务携带的参数.</param>
        </member>
        <member name="M:NKnife.Interface.IService.Initializes">
            <summary>
            初始化服务
            </summary>
            <returns></returns>
        </member>
        <member name="M:NKnife.Interface.IService.ReStart">
            <summary>
            重新启动服务。先初始化，再执行Start.
            </summary>
        </member>
        <member name="M:NKnife.Interface.IService.Start">
            <summary>
            启动服务
            </summary>
            <returns></returns>
        </member>
        <member name="M:NKnife.Interface.IService.Stop">
            <summary>
            终止服务
            </summary>
            <returns></returns>
        </member>
        <member name="M:NKnife.Interface.ISortable`1.Sort">
            <summary>
                Sorts the elements in the entire <see cref="T:System.Collections.Generic.List`1"></see> using the default
                comparer.
            </summary>
            <exception cref="T:System.InvalidOperationException">
                The default comparer
                <see cref="P:System.Collections.Generic.Comparer`1.Default"></see> cannot find an implementation of the
                <see cref="T:System.IComparable`1"></see> generic interface or the <see cref="T:System.IComparable"></see>
                interface for type <paramref name="T">T</paramref>.
            </exception>
        </member>
        <member name="M:NKnife.Interface.ISortable`1.Sort(System.Collections.Generic.IComparer{`0})">
            <summary>
                Sorts the elements in the entire <see cref="T:System.Collections.Generic.List`1"></see> using the specified
                comparer.
            </summary>
            <param name="comparer">
                The <see cref="T:System.Collections.Generic.IComparer`1"></see> implementation to use when
                comparing elements, or null to use the default comparer
                <see cref="P:System.Collections.Generic.Comparer`1.Default"></see>.
            </param>
            <exception cref="T:System.InvalidOperationException">
                <paramref name="comparer">comparer</paramref> is null, and the
                default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default"></see> cannot find implementation of
                the <see cref="T:System.IComparable`1"></see> generic interface or the <see cref="T:System.IComparable"></see>
                interface for type <paramref name="T">T</paramref>.
            </exception>
            <exception cref="T:System.ArgumentException">
                The implementation of <paramref name="comparer">comparer</paramref> caused
                an error during the sort. For example, <paramref name="comparer">comparer</paramref> might not return 0 when
                comparing an item with itself.
            </exception>
        </member>
        <member name="M:NKnife.Interface.ISortable`1.Sort(System.Comparison{`0})">
            <summary>
                Sorts the elements in the entire <see cref="T:System.Collections.Generic.List`1"></see> using the specified
                <see cref="T:System.Comparison`1"></see>.
            </summary>
            <param name="comparison">The <see cref="T:System.Comparison`1"></see> to use when comparing elements.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="comparison">comparison</paramref> is null.</exception>
            <exception cref="T:System.ArgumentException">
                The implementation of <paramref name="comparison">comparison</paramref>
                caused an error during the sort. For example, <paramref name="comparison">comparison</paramref> might not return 0
                when comparing an item with itself.
            </exception>
        </member>
        <member name="M:NKnife.Interface.ISortable`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary>
                Sorts the elements in a range of elements in <see cref="T:System.Collections.Generic.List`1"></see> using the
                specified comparer.
            </summary>
            <param name="index">The zero-based starting index of the range to sort.</param>
            <param name="count">The length of the range to sort.</param>
            <param name="comparer">
                The <see cref="T:System.Collections.Generic.IComparer`1"></see> implementation to use when
                comparing elements, or null to use the default comparer
                <see cref="P:System.Collections.Generic.Comparer`1.Default"></see>.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="index">index</paramref> is less than 0.   -or-
                <paramref name="count">count</paramref> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="index">index</paramref> and
                <paramref name="count">count</paramref> do not specify a valid range in the
                <see cref="T:System.Collections.Generic.List`1"></see>.   -or-   The implementation of
                <paramref name="comparer">comparer</paramref> caused an error during the sort. For example,
                <paramref name="comparer">comparer</paramref> might not return 0 when comparing an item with itself.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                <paramref name="comparer">comparer</paramref> is null, and the
                default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default"></see> cannot find implementation of
                the <see cref="T:System.IComparable`1"></see> generic interface or the <see cref="T:System.IComparable"></see>
                interface for type <paramref name="T">T</paramref>.
            </exception>
        </member>
        <member name="T:NKnife.Interface.ITouchInput">
            <summary>
                描述一个屏幕输入界面的接口
            </summary>
        </member>
        <member name="M:NKnife.Interface.ITouchInput.ShowInputView(System.Int16,System.Drawing.Point)">
            <summary>
                显示输入界面
            </summary>
            <param name="mode">输入模式:0.拼音;1.手写;2.符号;3.小写英文;4.大写英文;5.数字</param>
            <param name="location">界面的左上角坐标</param>
        </member>
        <member name="M:NKnife.Interface.ITouchInput.HideInputView">
            <summary>
                隐藏输入界面
            </summary>
        </member>
        <member name="M:NKnife.Interface.ITouchInput.Exit">
            <summary>
                退出输入界面
            </summary>
        </member>
        <member name="T:NKnife.Interface.IXml">
            <summary>
            描述一个可以序列化与反序列化为XML节点的接口
            </summary>
        </member>
        <member name="M:NKnife.Interface.IXml.ToXml(System.Xml.XmlDocument)">
            <summary>
            将类型通过xml的一个节点表达出来，
            </summary>
            <param name="parent">该节点将要附回到的XmlDocument文档</param>
            <returns>该节点已创建但暂未被附加到XmlDoucment的任何位置</returns>
        </member>
        <member name="M:NKnife.Interface.IXml.Parse(System.Xml.XmlElement)">
            <summary>
            从一个对应的XML节点解析出来本类型的数据内容
            </summary>
            <param name="element">一个对应的XML节点</param>
        </member>
        <member name="T:NKnife.Jobs.JobManager">
            <summary>
            描述针对JobPool的工作流的操作封装，其中包括仅执行一次的Job，和需要循环执行的Job。
            </summary>
        </member>
        <member name="F:NKnife.Jobs.JobManager._breakFlag">
            <summary>
            中断工作流的标记。
            </summary>
        </member>
        <member name="F:NKnife.Jobs.JobManager._pauseFlag">
            <summary>
            暂停工作流的标记
            </summary>
        </member>
        <member name="M:NKnife.Jobs.JobManager.#ctor">
            <summary>
            构造函数。描述一个Job的顺序工作流，其中包括仅执行一次的Job,和需要循环执行的Job。
            </summary>
        </member>
        <member name="P:NKnife.Jobs.JobManager.Pool">
            <summary>
            工作池。工作池中的Job将会被顺序执行一次（当某Job设定为无限循环时如果没有外部打断，将不会全部执行完毕）。
            </summary>
        </member>
        <member name="M:NKnife.Jobs.JobManager.Run">
            <summary>
            运行工作流
            </summary>
        </member>
        <member name="M:NKnife.Jobs.JobManager.Break">
            <summary>
            中断工作流
            </summary>
        </member>
        <member name="M:NKnife.Jobs.JobManager.Pause">
            <summary>
            暂停工作流，工作流只是暂停，下次启动时，会从断点处继续。
            </summary>
        </member>
        <member name="M:NKnife.Jobs.JobManager.Resume">
            <summary>
            从断点处继续工作流
            </summary>
        </member>
        <member name="M:NKnife.Jobs.JobManager.RunMethod(NKnife.Interface.IJobPool)">
            <summary>
            递归完成内部所有的Job
            </summary>
        </member>
        <member name="M:NKnife.Jobs.JobManager.RunJob(NKnife.Interface.IJob,System.Boolean)">
            <summary>
            运行单个Job
            </summary>
            <param name="job">单个Job</param>
            <param name="isOverall">工作池中的子工作轮循模式，当True时，会循环执行整个池中的所有子工作；当False时，对每项子工作都会执行完毕，才执行下一个工作。</param>
        </member>
        <member name="M:NKnife.Jobs.JobManager.ConditionsForJob(NKnife.Interface.IJob,System.Boolean)">
            <summary>
            当该Job需要循环
            当没有设置循环次数，即无限循环
            当已设置循环次数，但是已循环次数小于设置值
            </summary>
            <param name="job">单个Job</param>
            <param name="isOverall">工作池中的子工作轮循模式，当True时，会循环执行整个池中的所有子工作；当False时，对每项子工作都会执行完毕，才执行下一个工作。</param>
            <returns>指定的<see cref="!:job"/>需要循环处理</returns>
        </member>
        <member name="E:NKnife.Jobs.JobManager.AllWorkDone">
            <summary>
            当所有工作均已完成时发生
            </summary>
        </member>
        <member name="E:NKnife.Jobs.JobManager.Running">
            <summary>
            当Job即将被执行时发生
            </summary>
        </member>
        <member name="E:NKnife.Jobs.JobManager.Ran">
            <summary>
            当Job执行完成后发生
            </summary>
        </member>
        <member name="T:NKnife.JWebs">
            <summary>
                面向Java的Servlet的Web请求操作
            </summary>
        </member>
        <member name="M:NKnife.JWebs.UploadFile(System.IO.FileInfo,System.String,System.Int32)">
            <summary>
                上传文件
            </summary>
            <param name="file">指定的文件</param>
            <param name="servlet">指定的Servlet地址</param>
            <param name="timeout">超时，默认30秒</param>
        </member>
        <member name="M:NKnife.JWebs.WebPost(System.String,System.Text.Encoding,System.Collections.Specialized.NameValueCollection)">
            <summary>
                通过WebClient的扩展类型(增加随机的UserArgent，Cookie容器)进Post操作
            </summary>
            <param name="url">The URL.</param>
            <param name="endcoding"></param>
            <param name="postVars">The post vars.</param>
            <returns></returns>
        </member>
        <member name="M:NKnife.JWebs.WebPost(System.String,System.Text.Encoding,System.Int32,System.Collections.Specialized.NameValueCollection)">
            <summary>
                通过WebClient的扩展类型(增加随机的UserArgent，Cookie容器)进Post操作
            </summary>
            <param name="url">The URL.</param>
            <param name="encoding"></param>
            <param name="timeout">超时时长</param>
            <param name="postVars">The post vars.</param>
            <returns></returns>
        </member>
        <member name="T:NKnife.Mail.MailSender">
            <summary>
            邮件发送工具，支持认证发送
            </summary>
        </member>
        <member name="M:NKnife.Mail.MailSender.Send(System.Net.Mail.MailMessage)">
            <summary>
            发送邮件
            </summary>
            <param name="message">MailMessage实体</param>
        </member>
        <member name="M:NKnife.Mail.MailSender.Send(System.Net.Mail.MailMessage,System.Boolean)">
            <summary>
            发送邮件
            </summary>
            <param name="message">MailMessage实体</param>
            <param name="cached">是否缓存邮件（提高程序响应速度）</param>
        </member>
        <member name="M:NKnife.Mail.MailSender.Send(System.String,System.String,System.String,System.String)">
            <summary>
            发送邮件
            </summary>
            <param name="from">发送者地址</param>
            <param name="to">接收者地址（可填多个地址，用英文分号“;”分割）</param>
            <param name="subject">邮件主题</param>
            <param name="messageText">邮件内容</param>
        </member>
        <member name="M:NKnife.Mail.MailSender.Send(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            发送邮件
            </summary>
            <param name="from">发送者地址</param>
            <param name="to">接收者地址（可填多个地址，用英文分号“;”分割）</param>
            <param name="subject">邮件主题</param>
            <param name="messageText">邮件内容</param>
            <param name="cached">是否缓存邮件（提高程序响应速度）</param>
        </member>
        <member name="P:NKnife.Mail.MailSender.SmtpServer">
            <summary>
            SMTP服务器地址
            </summary>
        </member>
        <member name="P:NKnife.Mail.MailSender.ServerPort">
            <summary>
            服务器侦听端口
            </summary>
        </member>
        <member name="P:NKnife.Mail.MailSender.UserName">
            <summary>
            认证用户名
            </summary>
        </member>
        <member name="P:NKnife.Mail.MailSender.Password">
            <summary>
            认证用户密码
            </summary>
        </member>
        <member name="T:NKnife.Maths.BigInteger">
            <summary>
                一个描述超出int,long范围的“大数”的类型
            </summary>
        </member>
        <member name="F:NKnife.Maths.BigInteger.MaxLength">
            <summary>
                maximum length of the BigInteger in uint (4 bytes), change this to suit the required level of precision.
            </summary>
        </member>
        <member name="F:NKnife.Maths.BigInteger.PrimesBelow2000">
            <summary>
                primes smaller than 2000 to test the generated prime number
            </summary>
        </member>
        <member name="M:NKnife.Maths.BigInteger.#ctor">
            ***********************************************************************
             Constructor (Default value for BigInteger is 0
            ***********************************************************************
        </member>
        <member name="M:NKnife.Maths.BigInteger.ToString">
            <summary>
                Returns a string representing the BigInteger in base 10.
            </summary>
        </member>
        <member name="M:NKnife.Maths.BigInteger.ToString(System.Int32)">
            <summary>
                Returns a string representing the BigInteger in sign-and-magnitude
                format in the specified radix.
            </summary>
            <example>
                If the value of BigInteger is -255 in base 10, then ToString(16) returns "-FF"
            </example>
            <param name="radix">The radix.</param>
            <returns>
                A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:NKnife.Maths.BigInteger.ToHexString">
            <summary>
                Returns a hex string showing the contains of the BigInteger
            </summary>
            <example>
                1) If the value of BigInteger is 255 in base 10, then
                ToHexString() returns "FF"
                2) If the value of BigInteger is -255 in base 10, then
                ToHexString() returns ".....FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF01",
                which is the 2's complement representation of -255.
            </example>
            <returns></returns>
        </member>
        <member name="M:NKnife.Maths.BigInteger.Max(NKnife.Maths.BigInteger)">
            <summary>
                求输入值与当前值中较大的值
            </summary>
        </member>
        <member name="M:NKnife.Maths.BigInteger.Min(NKnife.Maths.BigInteger)">
            <summary>
                求输入值与当前值中的较小的值
            </summary>
        </member>
        <member name="M:NKnife.Maths.BigInteger.Absolute">
            <summary>
                绝对值
            </summary>
            <returns></returns>
        </member>
        <member name="M:NKnife.Maths.BigInteger.RandomBitsGenerator(System.Int32,System.Random)">
            <summary>
                按照指定的位数随机填充实例
            </summary>
            <param name="bits"></param>
            <param name="rand"></param>
        </member>
        <member name="M:NKnife.Maths.BigInteger.BitCount">
            <summary>
                返回在BigInteger中的最重要的位的位置。
                Eg.  The result is 0, if the value of BigInteger is 0...0000 0000
                The result is 1, if the value of BigInteger is 0...0000 0001
                The result is 2, if the value of BigInteger is 0...0000 0010
                The result is 2, if the value of BigInteger is 0...0000 0011
            </summary>
            <returns></returns>
        </member>
        <member name="T:NKnife.Maths.Combinations`1">
            <summary>
            描述数学中的“组合”概念
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:NKnife.Maths.Permutations`1">
            <summary>
                描述数学中的“排列”概念
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:NKnife.Maths.UtilityMath.RoundingMode">
            <summary>舍入的方式，指按“四舍五入”，或“四舍六入五成双”
            </summary>
        </member>
        <member name="F:NKnife.Maths.UtilityMath.RoundingMode.Rounding4She5Ru">
            <summary>
            四舍五入
            </summary>
        </member>
        <member name="F:NKnife.Maths.UtilityMath.RoundingMode.Rounding4She6Ru5Chengshuang">
            <summary>
            四舍六入五成双(System.Math.Round的默认方式)。
            Math.Round(1.25, 1) = 1.2 因为5前面是2,为偶数,所以把5舍去不进位。
            Math.Round(1.35, 1) = 1.4 因为5前面是3,为奇数,所以进位。
            而0也看成为偶数,所以Math.Round(0.5, 0) = 0。
            从统计学的角度,"四舍六入五成双"比"四舍五入"要科学,它使舍入后的结果有的变大,有的变小,更
            平均.而不是像四舍五入那样逢五就入,导致结果偏向大数。
            例如:1.15+1.25+1.35+1.45=5.2,若按四舍五入取一位小数计算1.2+1.3+1.4+1.5=5.4。
            按"四舍六入五成双"计算,1.2+1.2+1.4+1.4=5.2,舍入后的结果更能反映实际结果。
            </summary>
        </member>
        <member name="M:NKnife.Maths.UtilityMath.GetSequenceNumber``1(System.Collections.Generic.List{``0},System.Int32)">
            <summary>返回一个序列数，如果指定序列中的数是连续的，那么返回的是这个序列中的最大的数加一，如果不是连续的，将返回第一个填空的数。
            </summary>
            <param name="list"></param>
            <param name="first"></param>
            <returns></returns>
        </member>
        <member name="M:NKnife.Maths.UtilityMath.GetLength(System.Int32)">
            <summary>返回一个整数的位数
            </summary>
        </member>
        <member name="M:NKnife.Maths.UtilityMath.Round(System.Decimal,System.Int32)">
            <summary>按照四舍五入的规则进行舍位。
            因为Math.Round方法并不是遵循四舍五入的原则，而是采用“四舍六入五成双”这种方式，若需要
            舍入到的位的后面"小于5"或"大于5"的话,按通常意义的四舍五入处理。若"若需要舍入到的位的
            后面"等于5",则要看舍入后末位为偶数还是奇数。
            </summary>
            <param name="d"></param>
            <param name="decimals"></param>
            <returns></returns>
        </member>
        <member name="M:NKnife.Maths.UtilityMath.IncString(System.String)">
            <summary>将一个字符类型的数字加1，如字符串"20060308"，加1后变成"20060309"。
            如果字符串是"0002006"，"JH200603"，甚至是"JH20060A01"，这个函数是
            将字符串的ASCII码+1，所以基本不需考虑是否包含字母或包含0前缀。 
            </summary>
            <param name="numberStr">The number STR.</param>
            <returns></returns>
        </member>
        <member name="M:NKnife.Maths.UtilityMath.ContinuousMultiplication(System.Int32,System.Int32)">
            <summary>连乘积函数
            类似：1 x 2 x 3 x 4 ……
            </summary>   
            <param name="start">起点数(较小的数字)</param>
            <param name="end">终点数(较大的数字)</param>
        </member>
        <member name="M:NKnife.Maths.UtilityMath.Factorial(System.Int32)">
            <summary>阶乘函数。
            也就是求解将n个相异物排成一列的排列数。
            阶乘(factorial)是基斯顿·卡曼(Christian Kramp, 1760 – 1826)于1808年发明的运算符号。
            阶乘指从1乘以2乘以3乘以4一直乘到所要求的数。 
            即为限定连乘积函数从“0”开始。
            </summary>
            <param name="n">要求的阶乘数</param>
            <returns></returns>
        </member>
        <member name="M:NKnife.Maths.UtilityMath.P(System.Int32,System.Int32)">
            <summary>排列数函数
            公式P是指排列，从N个元素取R个进行排列。
            </summary>
        </member>
        <member name="M:NKnife.Maths.UtilityMath.C(System.Int32,System.Int32)">
            <summary>组合数函数
            公式C是指组合，从N个元素取R个进行组合。
            </summary>
            <param name="n"></param>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:NKnife.Maths.UtilityMath._test_P1(System.Int32,System.Int32)">
            <summary>[否决的，未完成的] 排列循环方法  
            </summary>  
            <param name="n"></param>  
            <param name="r"></param>  
            <returns></returns>  
        </member>
        <member name="M:NKnife.Maths.UtilityMath._test_P2(System.Int32,System.Int32)">
            <summary>[否决的，未完成的] 排列堆栈方法  
            </summary>  
            <param name="n"></param>  
            <param name="r"></param>  
            <returns></returns>  
        </member>
        <member name="M:NKnife.Maths.UtilityMath._test_C(System.Int32,System.Int32)">
            <summary>[否决的，未完成的] 组合  
            </summary>  
            <param name="n"></param>  
            <param name="r"></param>  
            <returns></returns>  
        </member>
        <member name="M:NKnife.Maths.UtilityMath._test_combination(System.Int32,System.Int32)">
            <summary>
            [否决的，未完成的] 
            10置换法完成组合
            算法思想：
            (1)  初始化一个m个元素的数组（全部由0，1组成），将前n个初始化为1，后面的为0。这时候就可以输出第一个组合序列了。
            (2)  从前往后找，找到第一个10组合，将其反转成01，然后将这个10组合前面的所有1，全部往左边推 ，
            即保证其前面的1都在最左边。这时又可以输出一组组合序列了。
            (3)  重复第(2)步，知道找不到10组合位置。这时已经输出了全部的可能序列了。 
            为什么？你想，（以m=5,n=3为例）一开始是11100，最后就是00111，已经没有10组合了 。 
            </summary>
            <param name="m"></param>
            <param name="n"></param>
        </member>
        <member name="T:NKnife.Pattern.CommandList">
            <summary>
                命令模式中命令接口的集合类
            </summary>
        </member>
        <member name="P:NKnife.Pattern.CommandList.CurrentCommand">
            <summary>
                当前命令,待撤销之操作
            </summary>
        </member>
        <member name="M:NKnife.Pattern.CommandList.AddCommand(NKnife.Pattern.ICommandPattern)">
            <summary>
                添加新命令并执行之
            </summary>
            <param name="command"></param>
        </member>
        <member name="M:NKnife.Pattern.CommandList.Execute(System.Object)">
            <summary>
                重做命令
            </summary>
        </member>
        <member name="M:NKnife.Pattern.CommandList.Cancel(System.Object)">
            <summary>
                撤销命令
            </summary>
        </member>
        <member name="M:NKnife.Pattern.CommandList.CanCancel">
            <summary>
                是否可以撤销
            </summary>
        </member>
        <member name="M:NKnife.Pattern.CommandList.CanExecute">
            <summary>
                是否可以重做
            </summary>
        </member>
        <member name="T:NKnife.Pattern.ICommandPattern">
            <summary>
            面向设计模式中的命令模式的命令接口。
            命令模式：将一个请求封装为一个对象，从而可用不同的的请求对客户进行参数化，队请求排队或者记录请求日志，以及支持可撤销的操作。
            1.它能很容易的维护所有命令的集合。
            2.它可以很方便的实现撤销和恢复命令。
            3.可以很方便的将每个执行记录日志。
            4.最重要的就是将发起者与实现者分离。
            </summary>
        </member>
        <member name="M:NKnife.Pattern.ICommandPattern.Cancel(System.Object)">
            <summary>
            取消操作
            </summary>
            <param name="parameter">此命令使用的数据。如果此命令不需要传递数据，则该对象可以设置为 null。</param>
        </member>
        <member name="M:NKnife.Pattern.ICommandPattern.CanCancel(System.Object)">
            <summary>
            是否允许取消操作
            </summary>
            <returns>
            如果可以执行此命令，则为 true；否则为 false。
            </returns>
        </member>
        <member name="T:NKnife.ShareResources.ArgumentValidationString">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:NKnife.ShareResources.ArgumentValidationString.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:NKnife.ShareResources.ArgumentValidationString.Culture">
            <summary>
              重写当前线程的 CurrentUICulture 属性
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="P:NKnife.ShareResources.ArgumentValidationString.ExceptionByteArrayValueMustBeGreaterThanZeroBytes">
            <summary>
              查找类似 数值必须大于0字节。 的本地化字符串。
            </summary>
        </member>
        <member name="P:NKnife.ShareResources.ArgumentValidationString.ExceptionEmptyString">
            <summary>
              查找类似 参数 &apos;{0}&apos;的值不能为空字符串。 的本地化字符串。
            </summary>
        </member>
        <member name="P:NKnife.ShareResources.ArgumentValidationString.ExceptionEnumerationNotDefined">
            <summary>
              查找类似 {0}不是{1}的一个有效值。 的本地化字符串。
            </summary>
        </member>
        <member name="P:NKnife.ShareResources.ArgumentValidationString.ExceptionExpectedType">
            <summary>
              查找类似 无效的类型，期待的类型必须为&apos;{0}&apos;。 的本地化字符串。
            </summary>
        </member>
        <member name="P:NKnife.ShareResources.ArgumentValidationString.ExceptionInvalidNullNameArgument">
            <summary>
              查找类似 参数&apos;{0}&apos;的名称不能为空引用或空字符串。 的本地化字符串。
            </summary>
        </member>
        <member name="P:NKnife.ShareResources.ArgumentValidationString.ValueMustIs0or1">
            <summary>
              查找类似 变量&apos;{0}&apos;的值必须是0或者1。 的本地化字符串。
            </summary>
        </member>
        <member name="T:NKnife.ShareResources.FilterString">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:NKnife.ShareResources.FilterString.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:NKnife.ShareResources.FilterString.Culture">
            <summary>
              重写当前线程的 CurrentUICulture 属性
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="P:NKnife.ShareResources.FilterString.All">
            <summary>
              查找类似 All Files|*.* 的本地化字符串。
            </summary>
        </member>
        <member name="P:NKnife.ShareResources.FilterString.Image">
            <summary>
              查找类似 Image Files|*.bmp;*.jpg;*.ico;*.icon;*.png;*.gif;|All Files|*.* 的本地化字符串。
            </summary>
        </member>
        <member name="P:NKnife.ShareResources.FilterString.Media">
            <summary>
              查找类似 Media Files|*.mpg;*.avi;*.wma;*.mov;*.wav;*.mp2;*.mp3|All Files|*.* 的本地化字符串。
            </summary>
        </member>
        <member name="P:NKnife.ShareResources.FilterString.SimpleSudoku">
            <summary>
              查找类似 SimpleSudoku Files (*.simsudo)|*.simsudo|All Files (*.*)|*.* 的本地化字符串。
            </summary>
        </member>
        <member name="P:NKnife.ShareResources.FilterString.Txt">
            <summary>
              查找类似 Text Files (*.txt)|*.txt|All Files (*.*)|*.* 的本地化字符串。
            </summary>
        </member>
        <member name="P:NKnife.ShareResources.FilterString.Xml">
            <summary>
              查找类似 Xml Files (*.xml)|*.xml|All Files (*.*)|*.* 的本地化字符串。
            </summary>
        </member>
        <member name="P:NKnife.ShareResources.FilterString.Zip">
            <summary>
              查找类似 Zip Files (*.zip)|*.zip|All Files (*.*)|*.* 的本地化字符串。
            </summary>
        </member>
        <member name="T:NKnife.ShareResources.GeneralString">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:NKnife.ShareResources.GeneralString.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:NKnife.ShareResources.GeneralString.Culture">
            <summary>
              重写当前线程的 CurrentUICulture 属性
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="P:NKnife.ShareResources.GeneralString.HttpUserAgents">
             <summary>
               查找类似 Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; .NET CLR 2.0.50727)~
            Mozilla/4.0 (compatible; MSIE 8.0; AOL 9.5; AOLBuild 4337.43; Windows NT 6.0; Trident/4.0; SLCC1; .NET CLR 2.0.50727; Media Center PC 5.0; .NET CLR 3.5.21022; .NET CLR 3.5.30729; .NET CLR 3.0.30618)~
            Mozilla/4.0 (compatible; MSIE 7.0; AOL 9.5; AOLBuild 4337.34; Windows NT 6.0; WOW64; SLCC1; .NET CLR 2.0.50727; Media Center PC 5.0; .NET CLR 3.5.30729; .NET CLR 3.0.30618)~
            Mozilla/5.0 (X11; U; Linux i686; pl-PL; rv:1.9.0.2) Gecko/20121 [字符串的其余部分被截断]&quot;; 的本地化字符串。
             </summary>
        </member>
        <member name="T:NKnife.ShareResources.RegexString">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:NKnife.ShareResources.RegexString.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:NKnife.ShareResources.RegexString.Culture">
            <summary>
              重写当前线程的 CurrentUICulture 属性
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="P:NKnife.ShareResources.RegexString.RegexStr_Br">
            <summary>
              查找类似 \r\n 的本地化字符串。
            </summary>
        </member>
        <member name="P:NKnife.ShareResources.RegexString.RegexStr_Date">
            <summary>
              查找类似 ((^((1[8-9]\d{2})|([2-9]\d{3}))([-\/\._])(10|12|0?[13578])([-\/\._])(3[01]|[12][0-9]|0?[1-9])$)|(^((1[8-9]\d{2})|([2-9]\d{3}))([-\/\._])(11|0?[469])([-\/\._])(30|[12][0-9]|0?[1-9])$)|(^((1[8-9]\d{2})|([2-9]\d{3}))([-\/\._])(0?2)([-\/\._])(2[0-8]|1[0-9]|0?[1-9])$)|(^([2468][048]00)([-\/\._])(0?2)([-\/\._])(29)$)|(^([3579][26]00)([-\/\._])(0?2)([-\/\._])(29)$)|(^([1][89][0][48])([-\/\._])(0?2)([-\/\._])(29)$)|(^([2-9][0-9][0][48])([-\/\._])(0?2)([-\/\._])(29)$)|(^([1][89][2468][048])([-\/\._])(0?2)([-\/\._])( [字符串的其余部分被截断]&quot;; 的本地化字符串。
            </summary>
        </member>
        <member name="P:NKnife.ShareResources.RegexString.RegexStr_FileName">
            <summary>
              查找类似 ^([a-zA-Z]:)?[^:]+$ 的本地化字符串。
            </summary>
        </member>
        <member name="P:NKnife.ShareResources.RegexString.RegexStr_FindEmail">
            <summary>
              查找类似 (?&lt;email&gt;[a-zA-Z][a-zA-Z0-9-_.]+\@[a-zA-Z][a-zA-Z0-9-_]+\.(?(?=[a-zA-Z]{2}\.)([a-zA-Z0-9-_]{2}\.[a-zA-Z0-9-_]{2})|([a-zA-Z0-9-_]{2,3}))) 的本地化字符串。
            </summary>
        </member>
        <member name="P:NKnife.ShareResources.RegexString.RegexStr_HttpUrl">
            <summary>
              查找类似 ^(http|https)\://([a-zA-Z0-9\.\-]+(\:[a-zA-Z0-9\.&amp;amp;%\$\-]+)*@)*((25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9])\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[0-9])|localhost|([a-zA-Z0-9\-]+\.)*[a-zA-Z0-9\-]+\.(com|edu|gov|int|mil|net|org|biz|arpa|info|name|pro|aero|coop|museum|[a-zA-Z]{1,10}))(\:[0-9]+)*(/($|[a-zA-Z0-9\.\,\?\&apos;\\\+&amp;amp;%\$#\=~_\-]+))*$ 的本地化字符串。
            </summary>
        </member>
        <member name="P:NKnife.ShareResources.RegexString.RegexStr_ScientificNotation">
            <summary>
              查找类似 ([+-]?)([^0][0-9]{1,}\.[0-9]{1,})E([+-]?)(\d+) 的本地化字符串。
            </summary>
        </member>
        <member name="P:NKnife.ShareResources.RegexString.RegexStr_SimpleEmail">
            <summary>
              查找类似 ^([0-9a-zA-Z]+[-._+&amp;amp;])*[0-9a-zA-Z]+@([-0-9a-zA-Z]+[.])+[a-zA-Z]{2,4}$ 的本地化字符串。
            </summary>
        </member>
        <member name="P:NKnife.ShareResources.RegexString.RegexStr_SimpleIdCard">
            <summary>
              查找类似 ^(^\d{15}$|^\d{18}$|^\d{17}(\d|X|x))$ 的本地化字符串。
            </summary>
        </member>
        <member name="P:NKnife.ShareResources.RegexString.RegexStr_Time">
            <summary>
              查找类似 ^((([0-1]?[0-9])|(2[0-3])):([0-5]?[0-9])(:[0-5]?[0-9])?)$ 的本地化字符串。
            </summary>
        </member>
        <member name="T:NKnife.ShareResources.SmartDateString">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:NKnife.ShareResources.SmartDateString.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:NKnife.ShareResources.SmartDateString.Culture">
            <summary>
              重写当前线程的 CurrentUICulture 属性
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="P:NKnife.ShareResources.SmartDateString.SmartDateT">
            <summary>
              查找类似 今天 的本地化字符串。
            </summary>
        </member>
        <member name="P:NKnife.ShareResources.SmartDateString.SmartDateToday">
            <summary>
              查找类似 今天 的本地化字符串。
            </summary>
        </member>
        <member name="P:NKnife.ShareResources.SmartDateString.SmartDateTom">
            <summary>
              查找类似 明天 的本地化字符串。
            </summary>
        </member>
        <member name="P:NKnife.ShareResources.SmartDateString.SmartDateTomorrow">
            <summary>
              查找类似 明天 的本地化字符串。
            </summary>
        </member>
        <member name="P:NKnife.ShareResources.SmartDateString.SmartDateY">
            <summary>
              查找类似 昨天 的本地化字符串。
            </summary>
        </member>
        <member name="P:NKnife.ShareResources.SmartDateString.SmartDateYesterday">
            <summary>
              查找类似 昨天 的本地化字符串。
            </summary>
        </member>
        <member name="P:NKnife.ShareResources.SmartDateString.StringToDateException">
            <summary>
              查找类似 字符串不能转化成日期 的本地化字符串。
            </summary>
        </member>
        <member name="P:NKnife.ShareResources.SmartDateString.ValueNotSmartDateException">
            <summary>
              查找类似 值不是SmartDate 类型 的本地化字符串。
            </summary>
        </member>
        <member name="T:NKnife.ShareResources.StringResource">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:NKnife.ShareResources.StringResource.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:NKnife.ShareResources.StringResource.Culture">
            <summary>
              重写当前线程的 CurrentUICulture 属性
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="P:NKnife.ShareResources.StringResource.CnCities">
            <summary>
              查找 System.Byte[] 类型的本地化资源。
            </summary>
        </member>
        <member name="P:NKnife.ShareResources.StringResource.Exception_TabName_Error">
            <summary>
              查找类似 异常详细信息 的本地化字符串。
            </summary>
        </member>
        <member name="P:NKnife.ShareResources.StringResource.Exception_TabName_Simple">
            <summary>
              查找类似 详细信息 的本地化字符串。
            </summary>
        </member>
        <member name="P:NKnife.ShareResources.StringResource.LogPanel_Info_Header">
            <summary>
              查找类似 日志信息 的本地化字符串。
            </summary>
        </member>
        <member name="P:NKnife.ShareResources.StringResource.LogPanel_Source_Header">
            <summary>
              查找类似 日志源 的本地化字符串。
            </summary>
        </member>
        <member name="P:NKnife.ShareResources.StringResource.LogPanel_Time_Header">
            <summary>
              查找类似 发生时间 的本地化字符串。
            </summary>
        </member>
        <member name="T:NKnife.Files.TextFileEncoding">
            <summary>
                用于取得一个文本文件的编码方式(Encoding)。来自国际象棋项目时的设计,lukan。
            </summary>
        </member>
        <member name="M:NKnife.Files.TextFileEncoding.GetEncoding(System.String)">
            <summary>
                取得一个文本文件的编码方式。如果无法在文件头部找到有效的前导符，Encoding.Default将被返回。
            </summary>
            <param name="fileName">文件名。</param>
            <returns></returns>
        </member>
        <member name="M:NKnife.Files.TextFileEncoding.GetEncoding(System.IO.FileStream)">
            <summary>
                取得一个文本文件流的编码方式。
            </summary>
            <param name="stream">文本文件流。</param>
            <returns></returns>
        </member>
        <member name="M:NKnife.Files.TextFileEncoding.GetEncoding(System.String,System.Text.Encoding)">
            <summary>
                取得一个文本文件的编码方式。
            </summary>
            <param name="fileName">文件名。</param>
            <param name="defaultEncoding">默认编码方式。当该方法无法从文件的头部取得有效的前导符时，将返回该编码方式。</param>
            <returns></returns>
        </member>
        <member name="M:NKnife.Files.TextFileEncoding.GetEncoding(System.IO.FileStream,System.Text.Encoding)">
            <summary>
                取得一个文本文件流的编码方式。
            </summary>
            <param name="stream">文本文件流。</param>
            <param name="defaultEncoding">默认编码方式。当该方法无法从文件的头部取得有效的前导符时，将返回该编码方式。</param>
            <returns></returns>
        </member>
        <member name="M:NKnife.Util.UtilAssembly.SearchAssemblyFileByDirectory(System.String)">
            <summary>
                搜索指定目录下所有.Net的程序集文件(Dll,Exe)
            </summary>
            <param name="directory">指定目录.</param>
            <returns></returns>
        </member>
        <member name="M:NKnife.Util.UtilAssembly.SearchAssemblyByDirectory(System.String)">
            <summary>
                搜索指定目录下所有.Net的程序集("*.dll","*.exe")
            </summary>
            <param name="directory">指定目录.</param>
            <returns></returns>
        </member>
        <member name="M:NKnife.Util.UtilByte.GetBitList(System.Int32)">
            <summary>
                根据Int类型的值，返回用1或0(对应true或false)填充的数组
                <remarks>从右侧开始向左索引(0~31)</remarks>
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NKnife.Util.UtilByte.GetBitValue(System.Int32,System.Int16)">
            <summary>
                返回Int数据中某一位是否为1
            </summary>
            <param name="value"></param>
            <param name="index">32位数据的从右向左的偏移位索引(0~31)</param>
            <returns>true表示该位为1，false表示该位为0</returns>
        </member>
        <member name="M:NKnife.Util.UtilByte.SetBitValue(System.Int32,System.Int16,System.Boolean)">
            <summary>
                设定Int数据中某一位的值
            </summary>
            <param name="value">位设定前的值</param>
            <param name="index">32位数据的从右向左的偏移位索引(0~31)</param>
            <param name="bitValue">true设该位为1,false设为0</param>
            <returns>返回位设定后的值</returns>
        </member>
        <member name="M:NKnife.Util.UtilByte.ToBigEndianByteArray(System.Int32)">
            <summary>
                将int转换为大端模式的字节数组，即高位在前（与<seealso cref="M:NKnife.Util.UtilByte.ToIntByBigEndian(System.Byte[])"/>相对应）。BigEndian是指低地址存放最高有效字节，高位在前（MSB）；而LittleEndian则是低地址存放最低有效字节，高位在后（LSB）。
            </summary>
        </member>
        <member name="M:NKnife.Util.UtilByte.ToIntByBigEndian(System.Byte[])">
            <summary>
                将大端模式（高位在前）的byte数组转为int(与<seealso cref="M:NKnife.Util.UtilByte.ToBigEndianByteArray(System.Int32)"/>相对应)。BigEndian是指低地址存放最高有效字节，高位在前（MSB）；而LittleEndian则是低地址存放最低有效字节，高位在后（LSB）。
            </summary>
        </member>
        <member name="M:NKnife.Util.UtilByte.ConvertToBytes(System.String,System.String)">
            <summary>
            16进制格式string转byte[]。
            </summary>
            <param name="hexString">一个描述16进制数据的字符串，每个16进制数据可能是全写，也可能是简写，如0xFF,或者FF。</param>
            <param name="separator">每个字节之间的间隔符，默认是空格。可以没有空格符。</param>
            <exception cref="T:System.ArgumentException">输入16进制数据字符串长度不符合要求</exception>
            <exception cref="T:System.FormatException">输入16进制数据字符串不符合16进制格式</exception>
        </member>
        <member name="M:NKnife.Util.UtilCollection.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
                Runs an action for all elements in the input.
            </summary>
        </member>
        <member name="M:NKnife.Util.UtilCollection.AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Adds all
                <paramref name="elements" /> to <paramref name="list" />.
            </summary>
        </member>
        <member name="M:NKnife.Util.UtilCollection.IsNullOrEmpty(System.Object[])">
            <summary>
                指示指定的数组是 null 或者 数组为空。
            </summary>
            <param name="objects">The objects.</param>
            <returns>
                <c>true</c> if [is null or empty] [the specified objects]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NKnife.Util.UtilCollection.IsNullOrEmpty``1(``0[])">
            <summary>
                指示指定的数组是 null 或者 数组为空。
            </summary>
            <param name="objects">The objects.</param>
            <returns>
                <c>true</c> if [is null or empty] [the specified objects]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NKnife.Util.UtilCollection.MergerArray``1(``0[],``0[])">
            <summary>
                合并数组
            </summary>
            <param name="first">第一个数组</param>
            <param name="second">第二个数组</param>
            <returns>合并后的数组(第一个数组+第二个数组，长度为两个数组的长度)</returns>
        </member>
        <member name="M:NKnife.Util.UtilCollection.MergerArray``1(``0[],``0)">
            <summary>
                数组追加
            </summary>
            <param name="source">原数组</param>
            <param name="value">待追加项</param>
            <returns>合并后的数组(数组+待追加项)</returns>
        </member>
        <member name="M:NKnife.Util.UtilCollection.SplitArray``1(``0[],System.Int32,System.Int32)">
            <summary>
                从数组中截取一部分成新的数组
            </summary>
            <param name="source">原数组</param>
            <param name="startIndex">原数组的起始位置</param>
            <param name="endIndex">原数组的截止位置</param>
            <returns></returns>
        </member>
        <member name="T:NKnife.Util.UtilConvert">
            <summary>
            转换抽象类
            </summary>
        </member>
        <member name="T:NKnife.Util.UtilConvert.ConvertMode">
            <summary>
                转换时的模式，一般指是严格转换还是宽松的转换
            </summary>
        </member>
        <member name="F:NKnife.Util.UtilConvert.ConvertMode.Strict">
            <summary>
                严格的
            </summary>
        </member>
        <member name="F:NKnife.Util.UtilConvert.ConvertMode.Relaxed">
            <summary>
                宽松的
            </summary>
        </member>
        <member name="M:NKnife.Util.UtilConvert.StringToEnum``1(System.String)">
            <summary>
            字符串转换成枚举
            </summary>
            <typeparam name="T">枚举类型</typeparam>
            <param name="enumString">字符串</param>
            <returns>枚举值</returns>
        </member>
        <member name="M:NKnife.Util.UtilConvert.GuidParse(System.String)">
            <summary>
                解析一个可能是Guid的字符串
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NKnife.Util.UtilConvert.Int32Parse(System.Object,System.Int32)">
            <summary>
                解析一个可能是数字的字符串
            </summary>
            <param name="obj">The obj.</param>
            <param name="whenParseFail">当解析失败时的返回值</param>
            <returns></returns>
        </member>
        <member name="M:NKnife.Util.UtilConvert.Int32Parse(System.String,System.Int32)">
            <summary>
                解析一个可能是数字的字符串
            </summary>
            <param name="value"></param>
            <param name="whenParseFail">当解析失败时的返回值</param>
            <returns></returns>
        </member>
        <member name="M:NKnife.Util.UtilConvert.Int16Parse(System.Object,System.Int16)">
            <summary>
                解析一个可能是数字的字符串
            </summary>
            <param name="obj">The obj.</param>
            <param name="whenParseFail">当解析失败时的返回值</param>
            <returns></returns>
        </member>
        <member name="M:NKnife.Util.UtilConvert.Int16Parse(System.String,System.Int16)">
            <summary>
                解析一个可能是数字的字符串
            </summary>
            <param name="value"></param>
            <param name="whenParseFail">当解析失败时的返回值</param>
            <returns></returns>
        </member>
        <member name="M:NKnife.Util.UtilConvert.BoolParse(System.Object)">
            <summary>
                考虑得比较全面的字符串向Bool值的解析方法(如果是Int值，大于0均为True)
            </summary>
        </member>
        <member name="M:NKnife.Util.UtilConvert.BoolParse(System.String)">
            <summary>
                考虑得比较全面的字符串向Bool值的解析方法(如果是Int值，大于0均为True)
            </summary>
            <param name="v">The v.</param>
            <returns></returns>
        </member>
        <member name="M:NKnife.Util.UtilConvert.NullToDBNull(System.Object)">
            <summary>
                填充数据表时将为Null的对象转换为DBNull，如果不是，原样返回原值
            </summary>
            <param name="obj">The obj.</param>
            <returns></returns>
        </member>
        <member name="M:NKnife.Util.UtilConvert.ConvertBase(System.Int32,System.String,System.Int32)">
            <summary>
                实现各进制数间的转换。如：ConvertBase(10, "15", 16)表示将10进制数15转换为16进制的数。
            </summary>
            <param name="from">原值的进制,只能是2,8,10,16四个值。</param>
            <param name="value">要转换的值,即原值</param>
            <param name="to">要转换到的目标进制，只能是2,8,10,16四个值。</param>
        </member>
        <member name="M:NKnife.Util.UtilConvert.FromString``1(System.String,``0)">
            <summary>
                转换指定的字符串为指定的类型，如转换不成功，将返回指定的类型的默认值
                <param name="v">指定的字符串</param>
                <param name="defaultValue">指定的类型的默认值</param>
            </summary>
        </member>
        <member name="M:NKnife.Util.UtilConvert.ToString``1(``0)">
            <summary>
                转换指定的类型为字符串，如转换不成功，将返回Null
            </summary>
        </member>
        <member name="M:NKnife.Util.UtilConvert.ConvertTo(System.Object,System.Type)">
            <summary>
                将数据转换为指定类型，一般用在实现了IConvertible接口的类型
            </summary>
            <param name="data">转换的数据</param>
            <param name="targetType">转换的目标类型</param>
        </member>
        <member name="M:NKnife.Util.UtilConvert.ConvertTo``1(System.Object)">
            <summary>
                将数据转换为指定类型，一般用在实现了IConvertible接口的类型
            </summary>
            <typeparam name="T">转换的目标类型</typeparam>
            <param name="data">转换的数据</param>
        </member>
        <member name="M:NKnife.Util.UtilConvert.IntToBoolean(System.Int32)">
            <summary>
                将整型变量转化为布尔变量(True或False).
                规则：如果整型数值大于0,返回True,否则返回False.（非严格模式）
            </summary>
            <param name="intParam">整型数</param>
            <returns>如果整型数值大于0,返回True,否则返回False.</returns>
        </member>
        <member name="M:NKnife.Util.UtilConvert.IntToBoolean(System.Int32,NKnife.Util.UtilConvert.ConvertMode)">
            <summary>
                将整型变量转化为布尔变量(True或False).
                规则：如果整型数值大于0,返回True,否则返回False.
            </summary>
            <param name="intParam">The int param.</param>
            <param name="mode">严格模式：只能转换0或1；宽松模式：大于0,返回True,否则返回False.</param>
            <returns></returns>
        </member>
        <member name="M:NKnife.Util.UtilConvert.CharToBoolean(System.Char)">
            <summary>
                将char转化为布尔变量(True或False).
            </summary>
            <param name="charParam">char值</param>
            <returns>如果char是0,返回False；如果char是1,返回True</returns>
        </member>
        <member name="M:NKnife.Util.UtilConvert.CharToBoolean(System.Char,NKnife.Util.UtilConvert.ConvertMode)">
            <summary>
                将char转化为布尔变量(True或False).
            </summary>
            <param name="charParam">char值</param>
            <param name="mode">选择是否严格转换模式，当宽松模式下，非0或1的char都将返回false</param>
            <returns>如果char是0,返回False；如果char是1,返回True</returns>
        </member>
        <member name="T:NKnife.Util.UtilDateTime">
            <summary>
            有关DateTime的扩展方法
            </summary>
        </member>
        <member name="P:NKnife.Util.UtilDateTime.Monthes">
            <summary>月份名称的字符串数组(英语)
            </summary>	
        </member>
        <member name="M:NKnife.Util.UtilDateTime.GetDateTime(System.String)">
            <summary>获取一个时间的当天的开始时间
            </summary>
            <param name="time">The begin time. eg:20110303</param>
            <returns></returns>
        </member>
        <member name="M:NKnife.Util.UtilDateTime.DateDiff(System.DateTime,System.DateTime,System.String)">
            <summary>返回两个日期之间的时间间隔（y：年份间隔、M：月份间隔、d：天数间隔、h：小时间隔、m：分钟间隔、s：秒钟间隔、ms：微秒间隔）     
            </summary>     
            <param name="date1">开始日期</param>     
            <param name="date2">结束日期</param>     
            <param name="interval">间隔标志</param>     
            <returns>返回间隔标志指定的时间间隔</returns>     
        </member>
        <member name="M:NKnife.Util.UtilDateTime.GetDate">
            <summary>
            返回标准日期格式string
            </summary>
        </member>
        <member name="M:NKnife.Util.UtilDateTime.GetDate(System.String,System.String)">
            <summary>
            返回指定日期格式
            </summary>
        </member>
        <member name="M:NKnife.Util.UtilDateTime.GetTime">
            <summary>
            返回标准时间格式string
            </summary>
        </member>
        <member name="M:NKnife.Util.UtilDateTime.GetDateTime">
            <summary>
            返回标准时间格式string
            </summary>
        </member>
        <member name="M:NKnife.Util.UtilDateTime.GetDateTime(System.Int32)">
            <summary>
            返回相对于当前时间的相对天数
            </summary>
        </member>
        <member name="M:NKnife.Util.UtilDateTime.GetDateTimeF">
            <summary>
            返回标准时间格式string
            </summary>
        </member>
        <member name="M:NKnife.Util.UtilDateTime.GetStandardDateTime(System.String,System.String)">
            <summary>
            返回标准时间 
            </summary>
        </member>
        <member name="M:NKnife.Util.UtilDateTime.GetStandardDateTime(System.String)">
            <summary>
            返回标准时间 yyyy-MM-dd HH:mm:ss
            </summary>
        </member>
        <member name="M:NKnife.Util.UtilDateTime.GetStandardDate(System.String)">
            <summary>返回标准时间 yyyy-MM-dd
            </summary>
        </member>
        <member name="M:NKnife.Util.UtilDateTime.IsDateString(System.String)">
            <summary>判断字符串是否是yy-mm-dd字符串
            </summary>
            <param name="dateValue">待判断字符串</param>
            <returns>判断结果</returns>
        </member>
        <member name="M:NKnife.Util.UtilDateTime.IsTimeString(System.String)">
            <summary>判断字符串是否是00:00:00字符串
            </summary>
            <param name="timeValue">待判断字符串</param>
            <returns>判断结果</returns>
        </member>
        <member name="M:NKnife.Util.UtilDateTime.GetTime(System.String,System.Int32@,System.Int32@,System.Int32@)">
            <summary>判断字符串是否是00:00:00字符串
            </summary>
            <param name="timeValue">待判断字符串</param>
            <param name="hour"></param>
            <param name="second"></param>
            <param name="minute"></param>
            <returns>判断结果</returns>
        </member>
        <member name="M:NKnife.Util.UtilDateTime.StrDateDiffSeconds(System.String,System.Int32)">
            <summary>返回与当前时间相差的秒数
            </summary>
            <param name="time"></param>
            <param name="sec"></param>
            <returns></returns>
        </member>
        <member name="M:NKnife.Util.UtilDateTime.StrDateDiffMinutes(System.String,System.Int32)">
            <summary>返回与当前时间相差的分钟数
            </summary>
            <param name="time"></param>
            <param name="minutes"></param>
            <returns></returns>
        </member>
        <member name="M:NKnife.Util.UtilDateTime.StrDateDiffHours(System.String,System.Int32)">
            <summary>返回与当前时间相差的小时数
            </summary>
            <param name="time"></param>
            <param name="hours"></param>
            <returns></returns>
        </member>
        <member name="M:NKnife.Util.UtilDateTime.ThisWeekRange(System.DateTime@,System.DateTime@)">
            <summary>计算本周的起止日期
            </summary>
            <param name="start"></param>
            <param name="end"></param>
        </member>
        <member name="M:NKnife.Util.UtilDateTime.WeekRange(System.Int32,System.Int32,System.DateTime@,System.DateTime@)">
            <summary>根据某年的第几周获取这周的起止日期
            </summary>
            <param name="year"></param>
            <param name="weekOrder"></param>
            <param name="start"></param>
            <param name="end"></param>
        </member>
        <member name="M:NKnife.Util.UtilDateTime.Today">
            <summary>返回今天(零时)
            </summary>
            <returns></returns>
        </member>
        <member name="M:NKnife.Util.UtilDateTime.IsSameDay(System.DateTime,System.DateTime)">
            <summary>指定两个时间值是否是一天的时间，不考虑该值所含的“小时，分，秒”等
            </summary>
            <param name="leftDay">The left day.</param>
            <param name="rightDay">The right day.</param>
            <returns>
              <c>true</c> if [is same day] [the specified left day]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NKnife.Util.UtilEnum.GetInstance``1(System.String)">
            <summary>
            通过字符串获取枚举成员实例
            </summary>
            <typeparam name="T">枚举名,比如Enum1</typeparam>
            <param name="member">枚举成员的常量名或常量值,
            范例:Enum1枚举有两个成员A=0,B=1,则传入"A"或"0"获取 Enum1.A 枚举类型</param>
        </member>
        <member name="M:NKnife.Util.UtilEnum.GetInstance``1(System.Object)">
            <summary>
            通过字符串获取枚举成员实例
            </summary>
            <typeparam name="T">枚举名,比如Enum1</typeparam>
            <param name="member">枚举成员的常量名或常量值,
            范例:Enum1枚举有两个成员A=0,B=1,则传入"A"或"0"获取 Enum1.A 枚举类型</param>
        </member>
        <member name="M:NKnife.Util.UtilEnum.GetMemberKeyValue``1">
            <summary>
            获取枚举成员名称和成员值的键值对集合
            </summary>
            <typeparam name="T">枚举名,比如Enum1</typeparam>
        </member>
        <member name="M:NKnife.Util.UtilEnum.GetMemberNames``1">
            <summary>
            获取枚举所有成员名称
            </summary>
            <typeparam name="T">枚举名,比如Enum1</typeparam>
        </member>
        <member name="M:NKnife.Util.UtilEnum.GetMemberName``1(System.Object)">
            <summary>
            获取枚举成员的名称
            </summary>
            <typeparam name="T">枚举名,比如Enum1</typeparam>
            <param name="member">枚举成员实例或成员值,
            范例:Enum1枚举有两个成员A=0,B=1,则传入Enum1.A或0,获取成员名称"A"</param>
        </member>
        <member name="M:NKnife.Util.UtilEnum.GetMemberValues``1">
            <summary>
            获取枚举所有成员值
            </summary>
            <typeparam name="T">枚举名,比如Enum1</typeparam>
        </member>
        <member name="M:NKnife.Util.UtilEnum.GetMemberValue``1(System.String)">
            <summary>
            获取枚举成员的值
            </summary>
            <typeparam name="T">枚举名,比如Enum1</typeparam>
            <param name="memberName">枚举成员的常量名,
            范例:Enum1枚举有两个成员A=0,B=1,则传入"A"获取0</param>
        </member>
        <member name="M:NKnife.Util.UtilEnum.GetUnderlyingType(System.Type)">
            <summary>
            获取枚举的基础类型
            </summary>
            <param name="enumType">枚举类型</param>
        </member>
        <member name="M:NKnife.Util.UtilEnum.IsDefined``1(System.String)">
            <summary>
            检测枚举是否包含指定成员
            </summary>
            <typeparam name="T">枚举名,比如Enum1</typeparam>
            <param name="member">枚举成员名或成员值</param>
        </member>
        <member name="M:NKnife.Util.UtilEquals.StringEquals(System.String,System.String)">
            <summary>
            比较两个字符串的值是否相等，在本方法中当字符串为null时或者为“”时等同对待。
            </summary>
        </member>
        <member name="M:NKnife.Util.UtilEquals.CollectionsNoSortedEquals``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``0})">
            <summary>
            对集合类型的比较。
            重要，指定的两个集合中的数据可能顺序不同。
            </summary>
        </member>
        <member name="T:NKnife.Util.UtilFile">
            <summary>
                文件与目录等System.IO下的类的扩展
            </summary>
        </member>
        <member name="F:NKnife.Util.UtilFile.PathSplitChar">
            <summary>
                路径分割符
            </summary>
        </member>
        <member name="M:NKnife.Util.UtilFile.Combine(System.String[])">
            <summary>
                扩展Path.Combine方法，可以合并多个路径字符串.
            </summary>
            <param name="paths">The paths.</param>
            <returns></returns>
        </member>
        <member name="M:NKnife.Util.UtilFile.IsValidFileName(System.String)">
            <summary>
                检查文件名是否规范(windows)
            </summary>
        </member>
        <member name="M:NKnife.Util.UtilFile.IsValidDirectoryName(System.String)">
            <summary>
                检查目录名是否规范
                Checks that a single directory name (not the full path) is valid.
            </summary>
        </member>
        <member name="M:NKnife.Util.UtilFile.IsDirectory(System.String)">
            <summary>
                Determines whether the specified filename is directory.
            </summary>
            <param name="filename">The filename.</param>
            <returns>
                <c>true</c> if the specified filename is directory; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NKnife.Util.UtilFile.GetDirectories(System.String,System.String,System.IO.SearchOption)">
            <summary>
                获取当前目录中与指定搜索模式匹配并使用某个值确定是否在子目录中搜索的目录的数组。
                与系统不同的是对系统文件夹和隐藏文件夹进行了处理。系统文件夹将不再搜索，也不再列出。
            </summary>
            <param name="path">要搜索的路径。</param>
            <param name="searchPattern">
                要与 path 中的文件名匹配的搜索字符串。此参数不能以两个句点（“..”）结束，不能在 System.IO.Path.DirectorySeparatorChar
                或 System.IO.Path.AltDirectorySeparatorChar 的前面包含两个句点（“..”），也不能包含 System.IO.Path.InvalidPathChars
                中的任何字符。
            </param>
            <param name="searchOption">System.IO.SearchOption 值之一，指定搜索操作应包括所有子目录还是仅包括当前目录。</param>
            <returns>与搜索模式匹配的目录的 String 数组。</returns>
        </member>
        <member name="M:NKnife.Util.UtilFile.CreateXml(System.String)">
            <summary>
                将指定目录下的子目录和文件生成xml文档
            </summary>
            <param name="targetDir">根目录</param>
            <returns>返回XmlDocument对象</returns>
        </member>
        <member name="M:NKnife.Util.UtilFile.CreateBranch(System.String,System.Xml.XmlElement,System.Xml.XmlDocument)">
            <summary>
                (子方法)将指定目录下的子目录和文件生成xml文档方法中生成Xml分支的子方法
            </summary>
            <param name="targetDir">子目录</param>
            <param name="xmlNode">父目录XmlDocument</param>
            <param name="myDocument">XmlDocument对象</param>
        </member>
        <member name="M:NKnife.Util.UtilFile.CopyLargeFile(System.String,System.String,System.Int32)">
            <summary>
                复制大文件。即每次复制文件的一小段，以节省总内存开销。
            </summary>
            <param name="fromFile">要复制的文件</param>
            <param name="toFile">要保存的位置</param>
            <param name="lengthEachTime">每次复制的长度</param>
        </member>
        <member name="M:NKnife.Util.UtilFile.CopyFiles(System.String,System.String,System.Boolean)">
            <summary>
                复制指定目录的所有文件,不包含子目录及子目录中的文件
            </summary>
            <param name="sourceDir">原始目录</param>
            <param name="targetDir">目标目录</param>
            <param name="overWrite">如果为true,表示覆盖同名文件,否则不覆盖</param>
        </member>
        <member name="M:NKnife.Util.UtilFile.CopyFiles(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
                复制指定目录的所有文件
            </summary>
            <param name="sourceDir">原始目录</param>
            <param name="targetDir">目标目录</param>
            <param name="overWrite">如果为true,覆盖同名文件,否则不覆盖</param>
            <param name="copySubDir">如果为true,包含子目录,否则不包含</param>
        </member>
        <member name="M:NKnife.Util.UtilFile.MoveFiles(System.String,System.String,System.Boolean)">
            <summary>
                剪切并粘贴指定目录的所有文件,不包含子目录
            </summary>
            <param name="sourceDir">原始目录</param>
            <param name="targetDir">目标目录</param>
            <param name="overWrite">如果为true,覆盖同名文件,否则不覆盖</param>
        </member>
        <member name="M:NKnife.Util.UtilFile.MoveFiles(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
                剪切并粘贴指定目录的所有文件
            </summary>
            <param name="sourceDir">原始目录</param>
            <param name="targetDir">目标目录</param>
            <param name="overWrite">如果为true,覆盖同名文件,否则不覆盖</param>
            <param name="moveSubDir">如果为true,包含目录,否则不包含</param>
        </member>
        <member name="M:NKnife.Util.UtilFile.DeleteFiles(System.String,System.Boolean)">
            <summary>
                删除指定目录的所有文件和子目录(考虑了文件的只读或一些影响操作的属性)
            </summary>
            <param name="targetDir">操作目录</param>
            <param name="delSubDir">如果为true,包含对子目录的操作</param>
        </member>
        <member name="M:NKnife.Util.UtilFile.CreateDirectory(System.String)">
            <summary>
                创建指定目录(可级联创建)
            </summary>
            <param name="targetDir"></param>
        </member>
        <member name="M:NKnife.Util.UtilFile.CreateDirectory(System.String,System.String)">
            <summary>
                建立子目录
            </summary>
            <param name="parentDir">父目录名称</param>
            <param name="subDirName">子目录名称</param>
        </member>
        <member name="M:NKnife.Util.UtilFile.DeleteDirectory(System.String)">
            <summary>
                删除指定目录
            </summary>
            <param name="targetDir">目录路径</param>
        </member>
        <member name="M:NKnife.Util.UtilFile.DeleteSubDirectory(System.String)">
            <summary>
                删除指定目录的所有子目录,不包括对当前目录文件的删除
            </summary>
            <param name="targetDir">目录路径</param>
        </member>
        <member name="M:NKnife.Util.UtilFile.GetRelativePath(System.String,System.String)">
            <summary>
                Converts a given absolute path and a given base path to a path that leads
                from the base path to the absoulte path. (as a relative path)
            </summary>
        </member>
        <member name="M:NKnife.Util.UtilFile.GetAbsolutePath(System.String,System.String)">
            <summary>
                Converts a given relative path and a given base path to a path that leads
                to the relative path absoulte.
            </summary>
        </member>
        <member name="M:NKnife.Util.UtilFile.DeepCopy(System.String,System.String,System.Boolean)">
            <summary>
                Deeps the copy.
            </summary>
            <param name="sourceDirectory">The source directory.</param>
            <param name="destinationDirectory">The destination directory.</param>
            <param name="overwrite">if set to <c>true</c> [overwrite].</param>
        </member>
        <member name="M:NKnife.Util.UtilFile.SearchDirectory(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
                搜索目录指定格式的文件.
            </summary>
            <param name="directory">The directory.</param>
            <param name="filemask">The filemask.</param>
            <param name="searchSubdirectories">if set to <c>true</c> [search subdirectories].</param>
            <param name="ignoreHidden">if set to <c>true</c> [ignore hidden].</param>
            <returns></returns>
        </member>
        <member name="M:NKnife.Util.UtilFile.SearchDirectory(System.String,System.String,System.Boolean)">
            <summary>
                搜索目录指定格式的文件.
            </summary>
            <param name="directory">The directory.</param>
            <param name="filemask">The filemask.</param>
            <param name="searchSubdirectories">if set to <c>true</c> [search subdirectories].</param>
            <returns></returns>
        </member>
        <member name="M:NKnife.Util.UtilFile.SearchDirectory(System.String,System.String)">
            <summary>
                搜索目录指定格式的文件.
            </summary>
            <param name="directory">The directory.</param>
            <param name="filemask">The filemask.</param>
            <returns></returns>
        </member>
        <member name="M:NKnife.Util.UtilFile.SearchDirectory(System.String,System.String,System.Collections.Generic.IList{System.String},System.Boolean,System.Boolean)">
            <summary>
                Finds all files which are valid to the mask <paramref name="filemask" /> in the path
                <paramref name="directory" /> and all subdirectories
                (if <paramref name="searchSubdirectories" /> is true).
                The found files are added to the List&lt;string&gt;
                <paramref name="collection" />.
                If <paramref name="ignoreHidden" /> is true, hidden files and folders are ignored.
            </summary>
            <param name="directory">The directory.</param>
            <param name="filemask">The filemask.</param>
            <param name="collection">The collection.</param>
            <param name="searchSubdirectories">if set to <c>true</c> [search subdirectories].</param>
            <param name="ignoreHidden">if set to <c>true</c> [ignore hidden].</param>
        </member>
        <member name="T:NKnife.Util.UtilRandom">
            <summary>
            针对.net的Random随机数生成器的扩展。
            2008年9月9日16时46分
            </summary>
        </member>
        <member name="T:NKnife.Util.UtilRandom.RandomCharType">
            <summary>
            枚举：生成的随机字符串（数字与大小写字母）的组合类型。
            </summary>
        </member>
        <member name="F:NKnife.Util.UtilRandom.RandomCharType.All">
            <summary>
            任意。数字与大小写字母。
            </summary>
        </member>
        <member name="F:NKnife.Util.UtilRandom.RandomCharType.Number">
            <summary>
            数字。
            </summary>
        </member>
        <member name="F:NKnife.Util.UtilRandom.RandomCharType.Uppercased">
            <summary>
            大写字母。
            </summary>
        </member>
        <member name="F:NKnife.Util.UtilRandom.RandomCharType.Lowercased">
            <summary>
            小写字母。
            </summary>
        </member>
        <member name="F:NKnife.Util.UtilRandom.RandomCharType.NumberAndUppercased">
            <summary>
            数字与大写字母。
            </summary>
        </member>
        <member name="F:NKnife.Util.UtilRandom.RandomCharType.NumberAndLowercased">
            <summary>
            数字与小写字母。
            </summary>
        </member>
        <member name="F:NKnife.Util.UtilRandom.RandomCharType.UppercasedAndLowercased">
            <summary>
            小写字母与大写字母。
            </summary>
        </member>
        <member name="F:NKnife.Util.UtilRandom.RandomCharType.None">
            <summary>
            嘛也不是
            </summary>
        </member>
        <member name="F:NKnife.Util.UtilRandom.CHAR_TO_SPLIT">
            <summary>
            大小写字母与数字(以英文逗号相隔)
            </summary>
        </member>
        <member name="M:NKnife.Util.UtilRandom.#cctor">
            <summary>构造函数
            </summary>
        </member>
        <member name="P:NKnife.Util.UtilRandom.Random">
            <summary>
            表示伪随机数生成器。静态属性。
            </summary>
        </member>
        <member name="M:NKnife.Util.UtilRandom.Next">
            <summary>返回非负随机数。
            </summary>
            <returns>返回大于等于零且小于 System.Int32.MaxValue 的 32 位带符号整数。</returns>
        </member>
        <member name="M:NKnife.Util.UtilRandom.Next(System.Int32)">
            <summary>返回一个小于所指定最大值的非负随机数。
            </summary>
            <param name="maxValue">要生成的随机数的上界（随机数不能取该上界值）。maxValue 必须大于等于零。</param>
            <returns>大于等于零且小于 maxValue 的 32 位带符号整数，即：返回值的范围通常包括零但不包括 maxValue。不过，如果 maxValue 等于零，则返回maxValue。</returns>
        </member>
        <member name="M:NKnife.Util.UtilRandom.Next(System.Int32,System.Int32)">
            <summary>返回一个指定范围内的随机数。
            </summary>
            <param name="minValue">返回的随机数的下界（随机数可取该下界值）。</param>
            <param name="maxValue">返回的随机数的上界（随机数不能取该上界值）。maxValue 必须大于等于 minValue。</param>
            <returns>一个大于等于 minValue 且小于 maxValue 的 32 位带符号整数，即：返回的值范围包括 minValue 但不包括 maxValue。如果minValue 等于 maxValue，则返回 minValue。</returns>
        </member>
        <member name="M:NKnife.Util.UtilRandom.GetInts(System.Int32,System.Int32,System.Int32)">
            <summary>获取一定数量的随机整数，可能会有重复。
            </summary>
            <param name="num">需获得随机整数的数量</param>
            <param name="minValue">随机整数的最小值</param>
            <param name="maxValue">随机整数的最大值</param>
            <returns></returns>
        </member>
        <member name="M:NKnife.Util.UtilRandom.GetUnrepeatInts(System.Int32,System.Int32,System.Int32)">
            <summary>获取一定数量不重复的随机整数。
            </summary>
            <param name="num">需获得随机整数的数量</param>
            <param name="minValue">随机整数的最小值</param>
            <param name="maxValue">随机整数的最大值</param>
            <returns></returns>
        </member>
        <member name="M:NKnife.Util.UtilRandom.GetString(System.Int32,NKnife.Util.UtilRandom.RandomCharType)">
            <summary>获取指定长度的(单字节)字符串
            </summary>
            <param name="num">所需字符串的长度</param>
            <param name="type">字符串中的字符的类型</param>
            <returns></returns>
        </member>
        <member name="M:NKnife.Util.UtilRandom.GetFixNumberString(System.Int32,System.Int32)">
            <summary>生成随机的银行卡卡号
            </summary>
            <param name="prefix"> </param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:NKnife.Util.UtilRandom.GetRandomSmsNumber">
            <summary>
            生成一个6位随机数，供短信验证码使用
            </summary>
            <returns></returns>
        </member>
        <member name="M:NKnife.Util.UtilRandom.GetRandomString(System.Int32)">
            <summary>
            生成指定长度的随机英文字符串（包含大小字母，数字，和一些符号）
            </summary>
            <param name="length">指定的长度</param>
            <returns>随机字符串</returns>
        </member>
        <member name="M:NKnife.Util.UtilReflection.InvokeMethod(System.Object,System.String,System.Object[],System.Reflection.BindingFlags)">
            <summary>
                通过反射执行指定对象的指定方法
            </summary>
            <param name="target"></param>
            <param name="methodName"></param>
            <param name="paramList"></param>
            <param name="bindingFlags"></param>
        </member>
        <member name="M:NKnife.Util.UtilReflection.InvokeStaticMethod(System.Type,System.String,System.Object[],System.Reflection.BindingFlags)">
            <summary>
                通过反射执行指定对象的指定静态方法
            </summary>
            <param name="targetType"></param>
            <param name="methodName"></param>
            <param name="paramList"></param>
            <param name="bindingFlags"></param>
        </member>
        <member name="M:NKnife.Util.UtilReflection.InvokePrivateStaticMethod(System.Type,System.String,System.Object[])">
            <summary>
            执行类的私有静态方法
            </summary>
            <param name="targetType"></param>
            <param name="methodName"></param>
            <param name="paramList"></param>
        </member>
        <member name="M:NKnife.Util.UtilReflection.InvokePublicStaticMethod(System.Type,System.String,System.Object[])">
            <summary>
            执行类的公有静态方法
            </summary>
            <param name="targetType"></param>
            <param name="methodName"></param>
            <param name="paramList"></param>
        </member>
        <member name="M:NKnife.Util.UtilReflection.InvokePrivateMethod(System.Object,System.String,System.Object[])">
            <summary>
            执行类的私有实例方法
            </summary>
            <param name="target"></param>
            <param name="methodName"></param>
            <param name="paramList"></param>
        </member>
        <member name="M:NKnife.Util.UtilReflection.InvokePublicMethod(System.Object,System.String,System.Object[])">
            <summary>
            执行类的公有实例方法
            </summary>
            <param name="target"></param>
            <param name="methodName"></param>
            <param name="paramList"></param>
        </member>
        <member name="M:NKnife.Util.UtilReflection.AttatchAllEvent(System.Object,System.Object,System.String)">
            <summary>
                通过反射找到指定对象的相关事件，并处理
            </summary>
        </member>
        <member name="M:NKnife.Util.UtilReflection.GetDelegateParameterTypes(System.Type)">
            <summary>
                获得委托的参数类型
            </summary>
        </member>
        <member name="P:NKnife.Util.UtilRegex.EmailAddress">
            <summary>
            正则：验证邮件地址。
            正则表达式来自：http://RegexLib.com
            </summary>
        </member>
        <member name="P:NKnife.Util.UtilRegex.HttpUrl">
            <summary>
            正则：验证Url地址。
            </summary>
        </member>
        <member name="P:NKnife.Util.UtilRegex.Br">
            <summary>
            正则：回车符“\r\n”。
            </summary>
        </member>
        <member name="P:NKnife.Util.UtilRegex.Date">
            <summary>
            正则：yy-mm-dd字符串。
            </summary>
        </member>
        <member name="P:NKnife.Util.UtilRegex.Time">
            <summary>
            正则：00:00:00字符串。
            </summary>
        </member>
        <member name="P:NKnife.Util.UtilRegex.FileName">
            <summary>
            正则：规范的文件名
            </summary>
        </member>
        <member name="M:NKnife.Util.UtilSerialize.GetSerializer(System.Type)">
            <summary>XmlSerializer的实例的生成效率不高，故保存已生成的实例，以提高效率。
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:NKnife.Util.UtilSorter">
            <summary>  
            排序帮助类（包括对string[],int[],datatable,T[]进行排序）  
            </summary>  
        </member>
        <member name="M:NKnife.Util.UtilSorter.SortIntArray(System.Int32[],System.Boolean)">
            <summary>  
            对int数组进行排序  
            </summary>  
            <param name="list">int数组</param>  
            <param name="asc">是否按升序排列</param>  
        </member>
        <member name="M:NKnife.Util.UtilSorter.SortStringArray(System.String[],System.Boolean)">
            <summary>  
            对string数组进行排序  
            </summary>  
            <param name="list">string数组</param>  
            <param name="asc">是否按升序排列</param>  
        </member>
        <member name="M:NKnife.Util.UtilSorter.SortDataTable(System.Data.DataTable,System.String,System.Boolean)">
            <summary>  
            对datatable进行排序，返回排序后的datatable  
            </summary>  
            <param name="dt">要排序的datatable</param>  
            <param name="order">排序字段</param>  
            <param name="asc">是否升序</param>  
            <returns></returns>  
        </member>
        <member name="M:NKnife.Util.UtilSorter.Sort``1(System.Object[],System.String,System.Boolean)">
            <summary>  
            对实体类进行排序  
            </summary>  
            <typeparam name="T">实体类型，如：User</typeparam>  
            <param name="list">实体类的数组</param>  
            <param name="order">排序字段（必须为属性）</param>  
            <param name="asc">是否按正序排序</param>  
        </member>
        <member name="T:NKnife.Util.UtilString">
            <summary>
            有关字符串String的扩展方法
            </summary>
        </member>
        <member name="M:NKnife.Util.UtilString.ToString(System.Object)">
            <summary>
            根据对象的属性与属性值生成字符串
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:NKnife.Util.UtilString.SplitXx(System.String)" -->
        <member name="M:NKnife.Util.UtilString.CharacterToCoding(System.String)">
            <summary>
            区位码及汉字之间的互换
            </summary>
            <param name="character">汉字</param>
            <returns></returns>
        </member>
        <member name="M:NKnife.Util.UtilString.CodingToCharacter(System.String)">
            <summary>
            区位码及汉字之间的互换
            </summary>
            <param name="coding">区位码</param>
            <returns></returns>
        </member>
        <member name="M:NKnife.Util.UtilString.SbcCaseToNumberic(System.String)">
            <summary>
            将全角数字转换为数字
            </summary>
            <param name="sbcCase">全角数字</param>
            <returns></returns>
        </member>
        <member name="M:NKnife.Util.UtilString.DistinctStringArray(System.String[],System.Int32)">
            <summary>
            清除字符串数组中的重复项
            </summary>
            <param name="strArray">字符串数组</param>
            <param name="maxElementLength">字符串数组中单个元素的最大长度</param>
            <returns></returns>
        </member>
        <member name="M:NKnife.Util.UtilString.DistinctStringArray(System.String[])">
            <summary>
            清除字符串数组中的重复项
            </summary>
            <param name="strArray">字符串数组</param>
            <returns></returns>
        </member>
        <member name="M:NKnife.Util.UtilString.GetSubString(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            取指定长度的字符串，字符串如果操过指定长度则将超出的部分用指定字符串代替。
            </summary>
            <param name="srcString">要检查的字符串</param>
            <param name="startIndex">起始位置</param>
            <param name="length">指定长度</param>
            <param name="tailString">用于替换的字符串,可为空</param>
            <returns>截取后的字符串</returns>
        </member>
        <member name="M:NKnife.Util.UtilString.IsChinese(System.Char)">
            <summary>
            判断字符是否汉字
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:NKnife.Util.UtilString.GetAssciHexCode(System.String)">
            <summary>
            获得字符串（包括汉字）assci码
            </summary>
            <param name="sSou"></param>
            <returns></returns>
        </member>
        <member name="F:NKnife.Util.UtilType._AppTypes">
            <summary>
            每次搜索Type是比较耗时的，在这里采用一个字典进行缓存
            </summary>
        </member>
        <member name="M:NKnife.Util.UtilType.Load(System.Reflection.Assembly,System.String)">
            <summary>
            从程序集中获取程序集实例中具有指定名称的 System.Type 对象。
            当输入assignableFromType时判断该Type是否是从assignableFromType继承。
            assignableFromType可以为Null，为Null时不作判断。
            </summary>
            <param name="assembly">指定的程序集</param>
            <param name="classname">类型的全名</param>
            <returns>如找到返回该类型，未找到返Null</returns>
        </member>
        <member name="M:NKnife.Util.UtilType.Load(System.Reflection.Assembly,System.String,System.Type)">
            <summary>
            从程序集中获取程序集实例中具有指定名称的 System.Type 对象。
            当输入assignableFromType时判断该Type是否是从assignableFromType继承。
            assignableFromType可以为Null，为Null时不作判断。
            </summary>
            <param name="assembly">指定的程序集</param>
            <param name="classname">类型的全名</param>
            <param name="assignableFromType">被继承的类型</param>
            <returns>如找到返回该类型，未找到返Null</returns>
        </member>
        <member name="M:NKnife.Util.UtilType.CreateType(System.Reflection.Assembly,System.String,System.Boolean)">
            <summary>
            从类型名称中创建类型
            </summary>
            <param name="assembly">类型所在程序集.</param>
            <param name="typeName">类型名</param>
            <param name="throwOnError">失败时是否抛出异常</param>
            <returns>Type</returns>
        </member>
        <member name="M:NKnife.Util.UtilType.CreateObject(System.Type,System.Type,System.Boolean,System.Type[],System.Object[])">
            <summary>
            从类型中创建此类型的实例(一些单例的规范命名的类型也可创建)
            </summary>
            <param name="type">类型</param>
            <param name="expectedType">期望的类型</param>
            <param name="throwOnError">失败时是否抛出异常</param>
            <param name="parameterTypes">创建实例所需参数的类型列表</param>
            <param name="parameterValues">创建实例所需的参数值列表</param>
            <returns>类型实例</returns>
        </member>
        <member name="M:NKnife.Util.UtilType.CreatedObjectBySingleMode(System.Type,System.Object[])">
            <summary>常见的几个单建模式的实例创建
            </summary>
            <param name="type"></param>
            <param name="parameterValues"></param>
            <returns></returns>
        </member>
        <member name="M:NKnife.Util.UtilType.CreatedObjectByNonPublic(System.Type,System.Object[])">
            <summary>从私有构造函数创建
            </summary>
            <param name="type"></param>
            <param name="parameterValues"></param>
            <returns></returns>
        </member>
        <member name="M:NKnife.Util.UtilType.CreateObject(System.Type,System.Type,System.Boolean,System.Object[])">
            <summary>从类型中创建此类型的实例（本方法不支持参数可为Null的构造函数）
            </summary>
            <param name="type">类型</param>
            <param name="expectedType">期望的类型</param>
            <param name="throwOnError">失败时是否抛出异常</param>
            <param name="parameters">创建实例所需的参数值列表</param>
            <returns>类型实例</returns>
        </member>
        <member name="M:NKnife.Util.UtilType.CreateObject(System.Reflection.Assembly,System.String,System.Type,System.Boolean,System.Object[])">
            <summary>从类型名中创建此类型的实例
            </summary>
            <param name="assembly">类型所在程序集.</param>
            <param name="typeName">类型名</param>
            <param name="expectedType">期望的类型</param>
            <param name="throwOnError">失败时是否抛出异常</param>
            <param name="parameters">创建实例所需的参数值列表</param>
            <returns>类型实例</returns>
        </member>
        <member name="M:NKnife.Util.UtilType.CreateObject(System.Reflection.Assembly,System.String,System.Type,System.Boolean,System.Type[],System.Object[])">
            <summary>从类型名中创建此类型的实例
            </summary>
            <param name="assembly">类型所在程序集.</param>
            <param name="typeName">类型名</param>
            <param name="expectedType">期望的类型</param>
            <param name="throwOnError">失败时是否抛出异常</param>
            <param name="parameterTypes">创建实例所需参数的类型列表</param>
            <param name="parameterValues">创建实例所需的参数值列表</param>
            <returns>类型实例</returns>
        </member>
        <member name="M:NKnife.Util.UtilType.FindType(System.String,System.String)">
            <summary>在指定的目录中查找指定的类型
            </summary>
            <param name="typeName">类型全名（包括命名空间）</param>
            <param name="path"></param>
            <returns>找到则返回指定的类型，否则返回空</returns>
        </member>
        <member name="M:NKnife.Util.UtilType.FindType(System.String)">
            <summary>在当前应用程序域中查找指定的类型
            </summary>
            <param name="typeName">类型全名（包括命名空间）</param>
            <returns>找到则返回指定的类型，否则返回空</returns>
        </member>
        <member name="M:NKnife.Util.UtilType.FindTypeMap(System.String)">
            <summary>从指定的目录找到所有Type，并返回Type全名为Key，Type为Value的Map
            </summary>
            <param name="path">指定的目录.</param>
            <returns></returns>
        </member>
        <member name="M:NKnife.Util.UtilType.FindTypesByDirectory(System.String,System.Type,System.Boolean,System.Boolean)">
            <summary>从指定的目录中找到所有的.Net程序集，并遍历所有程序集找到所有实现了指定接口或基类的类型
            </summary>
            <param name="path">指定的目录</param>
            <param name="targetType">指定接口的类型</param>
            <param name="isGenericTypeInterface">是否是泛型接口</param>
            <param name="containAbstract">是否包含虚类型</param>
            <returns></returns>
        </member>
        <member name="M:NKnife.Util.UtilType.FindAttributes``1(System.String)">
            <summary>
            从目录中找到所有的.Net程序集，并遍历所有程序集找到所有指定的定制特性
            </summary>
            <param name="appStartPath">The app start path.</param>
            <returns></returns>
        </member>
        <member name="M:NKnife.Util.UtilType.FindAttributeMap``1(System.String)">
            <summary>
            从目录中找到所有的.Net程序集，并遍历所有程序集找到所有指定的定制特性
            </summary>
            <param name="appStartPath">The app start path.</param>
            <returns></returns>
        </member>
        <member name="M:NKnife.Util.UtilType.FindAttributesByDirectory(System.String,System.Type)">
            <summary>
            从目录中找到所有的.Net程序集，并遍历所有程序集找到所有拥有指定的定制特性的类型
            </summary>
            <param name="appStartPath">The app start path.</param>
            <param name="targetAttribute">指定接口的类型</param>
            <returns></returns>
        </member>
        <member name="M:NKnife.Util.UtilType.GetAttributeFromAssembly``1(System.Reflection.Assembly[])">
            <summary>
            从程序集中获得元属性
            </summary>
            <param name="assemblies">程序集，如果为null，则从当前应用程序域中获取所载入的所有程序集</param>
            <returns>找到的元属性的数组</returns>
        </member>
        <member name="M:NKnife.Util.UtilType.GetAttributeFromRuntimeStack``1(System.Boolean)">
            <summary>
            从运行时的堆栈中获取元属性
            </summary>
            <param name="includeAll">是否包含堆栈上所有的元属性</param>
            <typeparam name="T">元属性类型</typeparam>
            <returns>找到的元属性的数组</returns>
        </member>
        <member name="M:NKnife.Util.UtilType.ContainsInterface(System.Type,System.Type)">
            <summary>
            指定的目标类型是否实现了指定的接口类型
            </summary>
            <param name="targetType">指定的目标类型.</param>
            <param name="implType">指定的接口类型.</param>
            <returns>
            	<c>true</c> if the specified target type contains interface; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NKnife.Util.UtilType.ContainsGenericInterface(System.Type,System.Type)">
            <summary>
            指定的目标类型是否实现了指定的【泛型接口】类型
            </summary>
            <param name="targetType">指定的目标类型.</param>
            <param name="implType">指定的接口类型.</param>
            <returns>
            	<c>true</c> if the specified target type contains interface; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NKnife.Util.UtilType.ContainsCustomAttribute(System.Type,System.Type)">
            <summary>
            指定的目标类型是否实现了指定的定制特性
            </summary>
            <param name="targetType">指定的目标类型.</param>
            <param name="attribute">指定的定制特性.</param>
            <returns>
            	<c>true</c> if the specified target type contains CustomAttribute; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NKnife.Util.UtilType.GetFirstCustomAttribute(System.Type)">
            <summary>尝试获取定制特性，如该类型没有指定的定制特性，将为空值
            </summary>
            <param name="targetType">Type of the target.</param>
            <returns></returns>
        </member>
        <member name="M:NKnife.Util.UtilType.GetFirstCustomAttribute``1(System.Type)">
            <summary>尝试获取指定类型的定制特性，如该类型没有指定的定制特性，将为空值
            </summary>
            <param name="targetType">Type of the target.</param>
            <returns></returns>
        </member>
        <member name="M:NKnife.Util.UtilType.CreateSimpleObject(System.String)">
            <summary>
            根据类型的名称创建一个对象（无参的构造函数）, 考虑了从程序目录中所有的程序集进行创建
            </summary>
            <param name="klass">The klass.</param>
            <returns></returns>
        </member>
        <member name="M:NKnife.Util.UtilType.InterfaceBuilder``1(System.Xml.XmlNode)">
            <summary>
            一个XML的节点，有name属性，其值为定义的接口名；有class属性，其值是实现了该接口的类的全名；
            通过该方法快速创建该类型。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:NKnife.Util.UtilType.CoderSettingClassBuilder``1(System.Xml.XmlNode,System.Func{System.Type,System.Boolean})">
            <summary>
            一个XML的节点，有name属性，其值为定义的接口名；有class属性，其值是实现了该接口的类的全名；
            通过该方法快速创建该类型。接收返回值时，必须校验是否为空。
            当有多个实现时，通过过滤器委托判断是否是需要的接口实现。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="node"></param>
            <param name="typeFilter"></param>
            <returns></returns>
        </member>
        <member name="M:NKnife.Util.UtilType.CoderSettingClassBuilder``1(System.Xml.XmlNode)">
            <summary>
            一个XML的节点，有name属性，其值为定义的接口名；有class属性，其值是实现了该接口的类的全名；
            通过该方法快速创建该类型。接收返回值时，必须校验是否为空。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:NKnife.XML.AbstractXmlAttribute.#ctor(System.String,System.String)">
            <summary>
            Xhtml节点的属性，类似：title="This is a Image!"。
            </summary>
            <param name="key">键，属性名。与大小写无关，全部强制转换成小写字母</param>
            <param name="value">值，属性值</param>
        </member>
        <member name="P:NKnife.XML.AbstractXmlAttribute.Key">
            <summary>
            属性名
            </summary>
        </member>
        <member name="P:NKnife.XML.AbstractXmlAttribute.Value">
            <summary>
            属性值
            </summary>
        </member>
        <member name="M:NKnife.XML.AbstractXmlAttribute.Equals(System.Object)">
            <summary>
            Gean重写。
            </summary>
        </member>
        <member name="M:NKnife.XML.AbstractXmlAttribute.GetHashCode">
            <summary>
            Gean重写。
            </summary>
        </member>
        <member name="M:NKnife.XML.AbstractXmlAttribute.ToString">
            <summary>
            Gean重写。生成真实的做为Xhtml中的属性的字符串格式。
            属性名与大小写无关，全部转换成小写字母
            </summary>
        </member>
        <member name="T:NKnife.XML.AbstractXmlDocument">
            <summary>
            对XmlDocument的类的封装
            </summary>
        </member>
        <member name="M:NKnife.XML.AbstractXmlDocument.#ctor(System.String)">
            <summary>
            基础的XmlDocument扩展(组合)类
            </summary>
            <param name="filePath">XML文件的物理绝对路径</param>
        </member>
        <member name="P:NKnife.XML.AbstractXmlDocument.DocumentElement">
            <summary>
            获取文档的根 System.Xml.XmlElement。
            </summary>
        </member>
        <member name="P:NKnife.XML.AbstractXmlDocument.RootNodeLocalName">
            <summary>
            获取文档的根 System.Xml.XmlElement 的本地名。
            </summary>
        </member>
        <member name="P:NKnife.XML.AbstractXmlDocument.ChildNodes">
            <summary>
            获取文档的根 System.Xml.XmlElement。
            </summary>
        </member>
        <member name="P:NKnife.XML.AbstractXmlDocument.FilePath">
            <summary>
            获取文档的绝对路径
            </summary>
        </member>
        <member name="M:NKnife.XML.AbstractXmlDocument.Save">
            <summary>
            保存当前XmlDocument
            </summary>
        </member>
        <member name="T:NKnife.XML.AbstractXmlElement">
            <summary>
            对XmlElement的封装类
            </summary>
        </member>
        <member name="M:NKnife.XML.AbstractXmlElement.#ctor(NKnife.XML.AbstractXmlDocument,System.String)">
            <summary>
            对XmlElement的封装类的构造函数
            </summary>
            <param name="doc">XmlDocument的封装类</param>
            <param name="localname">Element的Localname</param>
        </member>
        <member name="T:NKnife.XML.AbstractBaseXmlNode">
            <summary>
            对.net的Xml常使用的XmlNode, XmlDocument, XmlElement类的基类的封装
            </summary>
        </member>
        <member name="F:NKnife.XML.AbstractBaseXmlNode._BaseXmlNode">
            <summary>
            内部的XmlNode（组合）
            </summary>
        </member>
        <member name="M:NKnife.XML.XmlDatasetConvert.ConvertXmlToDataSet(System.String)">
            <summary>
            将xml对象内容字符串转换为DataSet
            </summary>
            <param name="xmlData"></param>
            <returns></returns>
        </member>
        <member name="M:NKnife.XML.XmlDatasetConvert.ConvertXmlFileToDataSet(System.String)">
            <summary>
            将xml文件转换为DataSet
            </summary>
            <param name="xmlFile"></param>
            <returns></returns>
        </member>
        <member name="M:NKnife.XML.XmlDatasetConvert.ConvertDataSetToXml(System.Data.DataSet)">
            <summary>
            将DataSet转换为xml对象字符串
            </summary>
            <param name="xmlDs"></param>
            <returns></returns>
        </member>
        <member name="M:NKnife.XML.XmlDatasetConvert.ConvertDataSetToXmlFile(System.Data.DataSet,System.String)">
            <summary>
            将DataSet转换为xml文件
            </summary>
            <param name="xmlDs"></param>
            <param name="xmlFile"></param>
        </member>
        <member name="T:NKnife.XML.XmlFormat">
            <summary>
            一个快速格式化XML文件的工具类型
            </summary>
        </member>
        <member name="M:NKnife.XML.XmlFormat.FormatXml(System.String)">
            <summary>
            格式化一个指定的XML文件的文本(具体内容，而非XML文件)
            </summary>
            <param name="xml">The XML.</param>
        </member>
        <member name="M:NKnife.XML.XmlFormat.ToFormattingXml">
            <summary>
            生成格式友好的Xml文本
            </summary>
            <value>友好的Xml文本</value>
        </member>
        <member name="M:NKnife.XML.XmlFormat.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="T:NKnife.XML.XmlHelper">
            <summary>
                针对XmlDocument的一些帮助方法。静态类。
            </summary>
        </member>
        <member name="M:NKnife.XML.XmlHelper.CreateNewDocument(System.String,System.String,System.String)">
            <summary>
                创建一个新的Xml文件，如文件存在，将覆盖。
            </summary>
            <param name="file">Xml文件全名</param>
            <param name="rootNodeName">根节点的LocalName</param>
            <param name="encoding">编码的字符串表示</param>
            <returns></returns>
        </member>
        <member name="M:NKnife.XML.XmlHelper.CreateNewDocument(System.String,System.String)">
            <summary>
                创建一个新的Xml文件，如文件存在，将覆盖。默认为utf-8编码模式。
            </summary>
            <param name="file">Xml文件全名</param>
            <param name="rootNodeName">根节点的LocalName</param>
            <returns></returns>
        </member>
        <member name="M:NKnife.XML.XmlHelper.CreateNewDocument(System.String)">
            <summary>
                创建一个新的Xml文件，如文件存在，将覆盖。默认为utf-8编码模式。默认根节点名root。
            </summary>
            <param name="file">Xml文件全名</param>
            <returns></returns>
        </member>
        <member name="T:NKnife.XML.XmlSchemaValidator">
            <summary>
            This class validates an xml string or xml document against an xml schema.
            It has public methods that return a boolean value depending on the validation
            of the xml.
            </summary>
        </member>
        <member name="M:NKnife.XML.XmlSchemaValidator.CheckArchXmlContent(System.String,System.String,System.String@)">
            <summary>
            根据已有的Schema对XmlDocument进行检测
            </summary>
            <param name="schemaFile">Schema文件路径</param>
            <param name="xmlFile">需校验的XmlDocument的路径</param>
            <returns></returns>
        </member>
        <member name="M:NKnife.XML.XmlSchemaValidator.DealError(System.Object,System.Xml.Schema.ValidationEventArgs)">
            <summary>
            错误处理程序
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="T:NKnife.Zip.GZip">
            <summary>支持多种多个文件/文件夹的压缩和解压还原(支持中文).工作原理:读取多文件,格式化后,按照某种规则保存到一个文件中
            </summary>
        </member>
        <member name="M:NKnife.Zip.GZip.Compress(System.String,System.String,System.String)">
            <summary>
            Compress
            </summary>
            <param name="lpSourceFolder">The location of the files to include in the zip file, all files including files in subfolders will be included.</param>
            <param name="lpDestFolder">Folder to write the zip file into</param>
            <param name="zipFileName">Name of the zip file to write</param>
        </member>
        <member name="M:NKnife.Zip.GZip.Compress(System.String,System.String,System.IO.SearchOption,System.String,System.String,System.Boolean)">
            <summary>
            Compress
            </summary>
            <param name="lpSourceFolder">The location of the files to include in the zip file</param>
            <param name="searchPattern">Search pattern (ie "*.*" or "*.txt" or "*.gif") to idendify what files in lpSourceFolder to include in the zip file</param>
            <param name="searchOption">Only files in lpSourceFolder or include files in subfolders also</param>
            <param name="lpDestFolder">Folder to write the zip file into</param>
            <param name="zipFileName">Name of the zip file to write</param>
            <param name="deleteTempFile">Boolean, true deleted the intermediate temp file, false leaves the temp file in lpDestFolder (for debugging)</param>
        </member>
        <member name="M:NKnife.Zip.GZip.Compress(System.IO.FileInfo[],System.String[],System.String,System.String,System.String)">
            <summary>
            Compress
            </summary>
            <param name="files">Array of FileInfo objects to be included in the zip file</param>
            <param name="folders">Array of Folder string</param>
            <param name="lpBaseFolder">Base folder to use when creating relative paths for the files 
            stored in the zip file. For example, if lpBaseFolder is 'C:\zipTest\Files\', and there is a file 
            'C:\zipTest\Files\folder1\sample.txt' in the 'files' array, the relative path for sample.txt 
            will be 'folder1/sample.txt'</param>
            <param name="lpDestFolder">Folder to write the zip file into</param>
            <param name="zipFileName">Name of the zip file to write</param>
        </member>
        <member name="M:NKnife.Zip.GZip.Compress(System.IO.FileInfo[],System.String,System.String,System.String)">
            <summary>
            Compress
            </summary>
            <param name="files">Array of FileInfo objects to be included in the zip file</param>
            <param name="lpBaseFolder">Base folder to use when creating relative paths for the files 
            stored in the zip file. For example, if lpBaseFolder is 'C:\zipTest\Files\', and there is a file 
            'C:\zipTest\Files\folder1\sample.txt' in the 'files' array, the relative path for sample.txt 
            will be 'folder1/sample.txt'</param>
            <param name="lpDestFolder">Folder to write the zip file into</param>
            <param name="zipFileName">Name of the zip file to write</param>
        </member>
        <member name="M:NKnife.Zip.GZip.Compress(System.IO.FileInfo[],System.String,System.String,System.String,System.Boolean)">
            <summary>
            Compress
            </summary>
            <param name="files">Array of FileInfo objects to be included in the zip file</param>
            <param name="lpBaseFolder">Base folder to use when creating relative paths for the files 
            stored in the zip file. For example, if lpBaseFolder is 'C:\zipTest\Files\', and there is a file 
            'C:\zipTest\Files\folder1\sample.txt' in the 'files' array, the relative path for sample.txt 
            will be 'folder1/sample.txt'</param>
            <param name="lpDestFolder">Folder to write the zip file into</param>
            <param name="zipFileName">Name of the zip file to write</param>
            <param name="deleteTempFile">Boolean, true deleted the intermediate temp file, false leaves the temp file in lpDestFolder (for debugging)</param>
        </member>
        <member name="T:NKnife.Zip.GZipFileEntry">
            <summary>
                File entry class.
            </summary>
        </member>
        <member name="T:System.Collections.ObjectModel.ObservableRangeCollection`1">
            <summary>
            Implementation of a dynamic data collection based on generic Collection&lt;T&gt;,
            implementing INotifyCollectionChanged to notify listeners
            when items get added, removed or the whole list is refreshed.
            </summary>
        </member>
        <member name="M:System.Collections.ObjectModel.ObservableRangeCollection`1.#ctor">
            <summary>
            Initializes a new instance of ObservableCollection that is empty and has default initial capacity.
            </summary>
        </member>
        <member name="M:System.Collections.ObjectModel.ObservableRangeCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the ObservableCollection class that contains
            elements copied from the specified collection and has sufficient capacity
            to accommodate the number of elements copied.
            </summary>
            <param name="collection">The collection whose elements are copied to the new list.</param>
            <remarks>
            The elements are copied onto the ObservableCollection in the
            same order they are read by the enumerator of the collection.
            </remarks>
            <exception cref="T:System.ArgumentNullException"> collection is a null reference </exception>
        </member>
        <member name="M:System.Collections.ObjectModel.ObservableRangeCollection`1.#ctor(System.Collections.Generic.List{`0})">
            <summary>
            Initializes a new instance of the ObservableCollection class
            that contains elements copied from the specified list
            </summary>
            <param name="list">The list whose elements are copied to the new list.</param>
            <remarks>
            The elements are copied onto the ObservableCollection in the
            same order they are read by the enumerator of the list.
            </remarks>
            <exception cref="T:System.ArgumentNullException"> list is a null reference </exception>
        </member>
        <member name="M:System.Collections.ObjectModel.ObservableRangeCollection`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the elements of the specified collection to the end of the <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>.
            </summary>
            <param name="collection">
            The collection whose elements should be added to the end of the <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>.
            The collection itself cannot be null, but it can contain elements that are null, if type T is a reference type.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is null.</exception>
        </member>
        <!-- Badly formed XML comment ignored for member "M:System.Collections.ObjectModel.ObservableRangeCollection`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})" -->
        <member name="M:System.Collections.ObjectModel.ObservableRangeCollection`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
            <summary> 
            Removes the first occurence of each item in the specified collection from the <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>.
            </summary>
            <param name="collection">The items to remove.</param>        
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is null.</exception>
        </member>
        <member name="M:System.Collections.ObjectModel.ObservableRangeCollection`1.RemoveAll(System.Predicate{`0})">
            <summary>
            Iterates over the collection and removes all items that satisfy the specified match.
            </summary>
            <remarks>The complexity is O(n).</remarks>
            <param name="match"></param>
            <returns>Returns the number of elements that where </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="match"/> is null.</exception>
        </member>
        <member name="M:System.Collections.ObjectModel.ObservableRangeCollection`1.RemoveAll(System.Int32,System.Int32,System.Predicate{`0})">
            <summary>
            Iterates over the specified range within the collection and removes all items that satisfy the specified match.
            </summary>
            <remarks>The complexity is O(n).</remarks>
            <param name="index">The index of where to start performing the search.</param>
            <param name="count">The number of items to iterate on.</param>
            <param name="match"></param>
            <returns>Returns the number of elements that where </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is out of range.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/> is out of range.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="match"/> is null.</exception>
        </member>
        <member name="M:System.Collections.ObjectModel.ObservableRangeCollection`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of elements from the <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>>.
            </summary>
            <param name="index">The zero-based starting index of the range of elements to remove.</param>
            <param name="count">The number of elements to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified range is exceeding the collection.</exception>
        </member>
        <member name="M:System.Collections.ObjectModel.ObservableRangeCollection`1.ReplaceRange(System.Collections.Generic.IEnumerable{`0})">
            <summary> 
            Clears the current collection and replaces it with the specified collection,
            using the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/>.
            </summary>             
            <param name="collection">The items to fill the collection with, after clearing it.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is null.</exception>
        </member>
        <member name="M:System.Collections.ObjectModel.ObservableRangeCollection`1.ReplaceRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Clears the current collection and replaces it with the specified collection,
            using the specified comparer to skip equal items.
            </summary>
            <param name="collection">The items to fill the collection with, after clearing it.</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to be used
            to check whether an item in the same location already existed before,
            which in case it would not be added to the collection, and no event will be raised for it.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="comparer"/> is null.</exception>
        </member>
        <member name="M:System.Collections.ObjectModel.ObservableRangeCollection`1.ReplaceRange(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Removes the specified range and inserts the specified collection,
            ignoring equal items (using <see cref="P:System.Collections.Generic.EqualityComparer`1.Default"/>).
            </summary>
            <param name="index">The index of where to start the replacement.</param>
            <param name="count">The number of items to be replaced.</param>
            <param name="collection">The collection to insert in that location.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is out of range.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/> is out of range.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is null.</exception>
        </member>
        <member name="M:System.Collections.ObjectModel.ObservableRangeCollection`1.ReplaceRange(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Removes the specified range and inserts the specified collection in its position, leaving equal items in equal positions intact.
            </summary>
            <param name="index">The index of where to start the replacement.</param>
            <param name="count">The number of items to be replaced.</param>
            <param name="collection">The collection to insert in that location.</param>
            <param name="comparer">The comparer to use when checking for equal items.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is out of range.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/> is out of range.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="comparer"/> is null.</exception>
        </member>
        <member name="M:System.Collections.ObjectModel.ObservableRangeCollection`1.ClearItems">
            <summary>
            Called by base class Collection&lt;T&gt; when the list is being cleared;
            raises a CollectionChanged event to any listeners.
            </summary>
        </member>
        <member name="M:System.Collections.ObjectModel.ObservableRangeCollection`1.SetItem(System.Int32,`0)">
            <summary>
            Called by base class Collection&lt;T&gt; when an item is set in list;
            raises a CollectionChanged event to any listeners.
            </summary>
        </member>
        <member name="M:System.Collections.ObjectModel.ObservableRangeCollection`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raise CollectionChanged event to any listeners.
            Properties/methods modifying this ObservableCollection will raise
            a collection changed event through this virtual method.
            </summary>
            <remarks>
            When overriding this method, either call its base implementation
            or call <see cref="!:BlockReentrancy"/> to guard against reentrant collection changes.
            </remarks>
        </member>
        <member name="M:System.Collections.ObjectModel.ObservableRangeCollection`1.ContainsAny(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Helper function to determine if a collection contains any elements.
            </summary>
            <param name="collection">The collection to evaluate.</param>
            <returns></returns>
        </member>
        <member name="M:System.Collections.ObjectModel.ObservableRangeCollection`1.OnEssentialPropertiesChanged">
            <summary>
            Helper to raise Count property and the Indexer property.
            </summary>
        </member>
        <member name="M:System.Collections.ObjectModel.ObservableRangeCollection`1.OnIndexerPropertyChanged">
            <summary>
            /// Helper to raise a PropertyChanged event for the Indexer property
            /// </summary>
        </member>
        <member name="M:System.Collections.ObjectModel.ObservableRangeCollection`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Object,System.Int32)">
            <summary>
            Helper to raise CollectionChanged event to any listeners
            </summary>
        </member>
        <member name="M:System.Collections.ObjectModel.ObservableRangeCollection`1.OnCollectionReset">
            <summary>
            Helper to raise CollectionChanged event with action == Reset to any listeners
            </summary>
        </member>
        <member name="M:System.Collections.ObjectModel.ObservableRangeCollection`1.OnRangeReplaced(System.Int32,System.Collections.Generic.ICollection{`0},System.Collections.Generic.ICollection{`0})">
            <summary>
            Helper to raise event for clustered action and clear cluster.
            </summary>
            <param name="followingItemIndex">The index of the item following the replacement block.</param>
            <param name="newCluster"></param>
            <param name="oldCluster"></param>
        </member>
        <member name="T:System.Collections.ObjectModel.EventArgsCache">
            <remarks>
            To be kept outside <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>, since otherwise, a new instance will be created for each generic type used.
            </remarks>
        </member>
        <member name="M:System.Collections.CollectionExtension.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
                Execute action on each item in enumeration.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items"></param>
            <param name="action"></param>
        </member>
        <member name="M:System.Collections.CollectionExtension.AsDelimited``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
                Converts an enumerable collection to an delimited string.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items"></param>
            <param name="delimiter"></param>
            <returns></returns>
        </member>
        <member name="M:System.Collections.CollectionExtension.HasAnyNulls``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Check for any nulls.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="M:System.Collections.CollectionExtension.IsTrueForAny``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
                Check if any of the items in the collection satisfied by the condition.
            </summary>
            <param name="items"></param>
            <param name="executor"></param>
            <returns></returns>
        </member>
        <member name="M:System.Collections.CollectionExtension.IsTrueForAll``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
                Check if all of the items in the collection satisfied by the condition.
            </summary>
            <param name="items"></param>
            <param name="executor"></param>
            <returns></returns>
        </member>
        <member name="M:System.Collections.CollectionExtension.ToDictionary``1(System.Collections.Generic.IList{``0})">
            <summary>
                Check if all of the items in the collection satisfied by the condition.
            </summary>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="M:System.Collections.DictionaryExtensions.Compare``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            详细比较两个字典是否内容一致
            </summary>
            <param name="source">源字典</param>
            <param name="target">目标字典</param>
            <returns></returns>
        </member>
        <member name="M:System.BytesExtension.IsNullOrEmptyOrConsistBy(System.Byte[],System.Byte)">
            <summary>
                判断是否为null,empty,或由指定的数据组成
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:System.BytesExtension.ToString(System.Byte[],System.Text.Encoding,System.Boolean)" -->
        <member name="M:System.BytesExtension.ToHexString(System.Byte)">
            <summary>
                转换为十六进制字符串
            </summary>
        </member>
        <member name="M:System.BytesExtension.ToHexString(System.Collections.Generic.IEnumerable{System.Byte},System.Char[])">
            <summary>
                转换为十六进制字符串
            </summary>
        </member>
        <member name="M:System.BytesExtension.ToBase64String(System.Byte[])">
            <summary>
                转换为Base64字符串
            </summary>
        </member>
        <member name="M:System.BytesExtension.ToInt(System.Byte[],System.Int32)">
            <summary>
                转换为基础数据类型
            </summary>
        </member>
        <member name="M:System.BytesExtension.ToInt64(System.Byte[],System.Int32)">
            <summary>
                转换为基础数据类型
            </summary>
        </member>
        <member name="M:System.BytesExtension.ToBoolean(System.Byte[],System.Int32)">
            <summary>
                转换为基础数据类型
            </summary>
        </member>
        <member name="M:System.BytesExtension.ToChar(System.Byte[],System.Int32)">
            <summary>
                转换为基础数据类型
            </summary>
        </member>
        <member name="M:System.BytesExtension.ToDouble(System.Byte[],System.Int32)">
            <summary>
                转换为基础数据类型
            </summary>
        </member>
        <member name="M:System.BytesExtension.ToSingle(System.Byte[],System.Int32)">
            <summary>
                转换为基础数据类型
            </summary>
        </member>
        <member name="M:System.BytesExtension.ToUInt16(System.Byte[],System.Int32)">
            <summary>
                转换为基础数据类型
            </summary>
        </member>
        <member name="M:System.BytesExtension.ToUInt32(System.Byte[],System.Int32)">
            <summary>
                转换为基础数据类型
            </summary>
        </member>
        <member name="M:System.BytesExtension.ToUInt64(System.Byte[],System.Int32)">
            <summary>
                转换为基础数据类型
            </summary>
        </member>
        <member name="M:System.BytesExtension.Hash(System.Byte[],System.String)">
            <summary>
                使用指定算法Hash
            </summary>
        </member>
        <member name="M:System.BytesExtension.Hash(System.Byte[])">
            <summary>
                使用默认算法Hash
            </summary>
        </member>
        <member name="M:System.BytesExtension.GetBit(System.Byte,System.Int32)">
            <summary>
                位运算:获取取第index是否为1
            </summary>
        </member>
        <member name="M:System.BytesExtension.SetBit(System.Byte,System.Int32)">
            <summary>
                位运算:将第index位设为1
            </summary>
        </member>
        <member name="M:System.BytesExtension.ClearBit(System.Byte,System.Int32)">
            <summary>
                位运算:将第index位设为0
            </summary>
        </member>
        <member name="M:System.BytesExtension.ReverseBit(System.Byte,System.Int32)">
            <summary>
                位运算:将第index位取反
            </summary>
        </member>
        <member name="M:System.BytesExtension.Save(System.Byte[],System.String)">
            <summary>
                保存为文件
            </summary>
        </member>
        <member name="M:System.BytesExtension.Find(System.Byte[],System.Byte[],System.Int32)">
            <summary>
                报告指定的字节数组在源数组中的第一个匹配项的索引。
            </summary>
            <param name="data">源数组</param>
            <param name="target">指定的字节数组</param>
            <param name="position">开始匹配的位置</param>
            <returns>索引值。为-1时，指无匹配项。</returns>
        </member>
        <member name="M:System.BytesExtension.ToMemoryStream(System.Byte[])">
            <summary>
                转换为内存流
            </summary>
        </member>
        <member name="M:System.BytesExtension.Compare(System.Byte[],System.Byte[])">
            <summary>
            比较字节数组
            </summary>
            <param name="b1">字节数组1</param>
            <param name="b2">字节数组2</param>
        </member>
        <member name="M:System.BytesExtension.MemoryCompare(System.Byte[],System.Byte[])">
            <summary>
            用memcmp比较字节数组
            </summary>
            <param name="b1">字节数组1</param>
            <param name="b2">字节数组2</param>
            <returns>如果两个数组相同，返回0；如果数组1小于数组2，返回小于0的值；如果数组1大于数组2，返回大于0的值。</returns>
        </member>
        <member name="M:System.BytesExtension.memcmp(System.Byte[],System.Byte[],System.IntPtr)">
            <summary>
            memcmp API
            </summary>
            <param name="b1">字节数组1</param>
            <param name="b2">字节数组2</param>
            <param name="count"></param>
            <returns>如果两个数组相同，返回0；如果数组1小于数组2，返回小于0的值；如果数组1大于数组2，返回大于0的值。</returns>
        </member>
        <member name="T:System.DateTimeExtensions">
            <summary>
            Static class containing Fluent <see cref="T:System.DateTime"/> extension methods.
            </summary>
        </member>
        <member name="M:System.DateTimeExtensions.IsToday(System.DateTime)">
            <summary>当前的时间是否是今天的时间
            </summary>
            <param name="datetime">The date.</param>
            <returns>
              <c>true</c> if the specified date is today; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.DateTimeExtensions.TicksInMillis(System.DateTime)">
            <summary>当前时间的一个毫秒级的长整型数值（保持和Java的一致性）
            Java获取此值的方法是:Calendar.getInstance().getTimeInMillis()
            具体分析请见:http://blog.csdn.net/LaoBai_2006/archive/2008/10/22/3124719.aspx
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.DateTimeExtensions.EndOfDay(System.DateTime)">
            <summary>
            Returns the very end of the given day (the last millisecond of the last hour for the given <see cref="T:System.DateTime"/>).
            </summary>
        </member>
        <member name="M:System.DateTimeExtensions.BeginningOfDay(System.DateTime)">
            <summary>
            Returns the StartBeatingTimer of the given day (the first millisecond of the given <see cref="T:System.DateTime"/>).
            </summary>
        </member>
        <member name="M:System.DateTimeExtensions.NextYear(System.DateTime)">
            <summary>
            Returns the same date (same Day, Month, Hour, Minute, Second etc) in the next calendar year. 
            If that day does not exist in next year in same month, number of missing days is added to the last day in same month next year.
            </summary>
        </member>
        <member name="M:System.DateTimeExtensions.PreviousYear(System.DateTime)">
            <summary>
            Returns the same date (same Day, Month, Hour, Minute, Second etc) in the previous calendar year.
            If that day does not exist in previous year in same month, number of missing days is added to the last day in same month previous year.
            </summary>
        </member>
        <member name="M:System.DateTimeExtensions.NextDay(System.DateTime)">
            <summary>
            Returns <see cref="T:System.DateTime"/> increased by 24 hours ie Next Day.
            </summary>
        </member>
        <member name="M:System.DateTimeExtensions.PreviousDay(System.DateTime)">
            <summary>
            Returns <see cref="T:System.DateTime"/> decreased by 24h period ie Previous Day.
            </summary>
        </member>
        <member name="M:System.DateTimeExtensions.Previous(System.DateTime,System.DayOfWeek)">
            <summary>
            Returns first next occurrence of specified <see cref="T:System.DayOfWeek"/>.
            </summary>
        </member>
        <member name="M:System.DateTimeExtensions.WeekAfter(System.DateTime)">
            <summary>
            Increases supplied <see cref="T:System.DateTime"/> for 7 days ie returns the Next Week.
            </summary>
        </member>
        <member name="M:System.DateTimeExtensions.WeekEarlier(System.DateTime)">
            <summary>
            Decreases supplied <see cref="T:System.DateTime"/> for 7 days ie returns the Previous Week.
            </summary>
        </member>
        <member name="M:System.DateTimeExtensions.IncreaseTime(System.DateTime,System.TimeSpan)">
            <summary>
            Increases the <see cref="T:System.DateTime"/> object with given <see cref="T:System.TimeSpan"/> value.
            </summary>
        </member>
        <member name="M:System.DateTimeExtensions.DecreaseTime(System.DateTime,System.TimeSpan)">
            <summary>
            Decreases the <see cref="T:System.DateTime"/> object with given <see cref="T:System.TimeSpan"/> value.
            </summary>
        </member>
        <member name="M:System.DateTimeExtensions.SetYear(System.DateTime,System.Int32)">
            <summary>
            Returns <see cref="T:System.DateTime"/> with changed Year part.
            </summary>
        </member>
        <member name="M:System.DateTimeExtensions.SetMonth(System.DateTime,System.Int32)">
            <summary>
            Returns <see cref="T:System.DateTime"/> with changed Month part.
            </summary>
        </member>
        <member name="M:System.DateTimeExtensions.SetDay(System.DateTime,System.Int32)">
            <summary>
            Returns <see cref="T:System.DateTime"/> with changed Day part.
            </summary>
        </member>
        <member name="M:System.DateTimeExtensions.SetDate(System.DateTime,System.Int32)">
            <summary>
            Returns <see cref="T:System.DateTime"/> with changed Year part.
            </summary>
        </member>
        <member name="M:System.DateTimeExtensions.SetDate(System.DateTime,System.Int32,System.Int32)">
            <summary>
            Returns <see cref="T:System.DateTime"/> with changed Year and Month part.
            </summary>
        </member>
        <member name="M:System.DateTimeExtensions.SetDate(System.DateTime,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns <see cref="T:System.DateTime"/> with changed Year, Month and Day part.
            </summary>
        </member>
        <member name="M:System.DateTimeExtensions.SetTime(System.DateTime,System.Int32)">
            <summary>
            Returns the original <see cref="T:System.DateTime"/> with Hour part changed to supplied hour parameter.
            </summary>
        </member>
        <member name="M:System.DateTimeExtensions.SetTime(System.DateTime,System.Int32,System.Int32)">
            <summary>
            Sets the time of the current date with minute precision
            </summary>
            <param name="current">The current date</param>
            <param name="hour">The hour</param>
            <param name="minute">The minute</param>
        </member>
        <member name="M:System.DateTimeExtensions.SetTime(System.DateTime,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the time of the current date with second precision
            </summary>
            <param name="current">The current date</param>
            <param name="hour">The hour</param>
            <param name="minute">The minute</param>
            <param name="second">The second</param>
            <returns></returns>
        </member>
        <member name="M:System.DateTimeExtensions.SetTime(System.DateTime,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the time of the current date with millisecond precision
            </summary>
            <param name="current">The current date</param>
            <param name="hour">The hour</param>
            <param name="minute">The minute</param>
            <param name="second">The second</param>
            <param name="millisecond">The millisecond</param>
            <returns></returns>
        </member>
        <member name="M:System.DateTimeExtensions.SetHour(System.DateTime,System.Int32)">
            <summary>
            Returns <see cref="T:System.DateTime"/> with changed Hour part.
            </summary>
        </member>
        <member name="M:System.DateTimeExtensions.SetMinute(System.DateTime,System.Int32)">
            <summary>
            Returns <see cref="T:System.DateTime"/> with changed Minute part.
            </summary>
        </member>
        <member name="M:System.DateTimeExtensions.SetSecond(System.DateTime,System.Int32)">
            <summary>
            Returns <see cref="T:System.DateTime"/> with changed Second part.
            </summary>
        </member>
        <member name="M:System.DateTimeExtensions.SetMillisecond(System.DateTime,System.Int32)">
            <summary>
            Returns <see cref="T:System.DateTime"/> with changed Millisecond part.
            </summary>
        </member>
        <member name="M:System.DateTimeExtensions.Midnight(System.DateTime)">
            <summary>
            Returns original <see cref="T:System.DateTime"/> value with time part set to midnight (alias for <see cref="M:System.DateTimeExtensions.BeginningOfDay(System.DateTime)"/> method).
            </summary>
        </member>
        <member name="M:System.DateTimeExtensions.Noon(System.DateTime)">
            <summary>
            Returns original <see cref="T:System.DateTime"/> value with time part set to Noon (12:00:00h).
            </summary>
            <param name="value">The <see cref="T:System.DateTime"/> find Noon for.</param>
            <returns>A <see cref="T:System.DateTime"/> value with time part set to Noon (12:00:00h).</returns>
        </member>
        <member name="M:System.DateTimeExtensions.IsBefore(System.DateTime,System.DateTime)">
            <summary>
            Determines whether the specified <see cref="T:System.DateTime"/> is before then current value.
            </summary>
            <param name="current">The current value.</param>
            <param name="toCompareWith">Value to compare with.</param>
            <returns>
            	<c>true</c> if the specified current is before; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.DateTimeExtensions.IsAfter(System.DateTime,System.DateTime)">
            <summary>
            Determines whether the specified <see cref="T:System.DateTime"/> value is After then current value.
            </summary>
            <param name="current">The current value.</param>
            <param name="toCompareWith">Value to compare with.</param>
            <returns>
            	<c>true</c> if the specified current is after; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.DateTimeExtensions.At(System.DateTime,System.Int32,System.Int32)">
            <summary>
            Returns the given <see cref="T:System.DateTime"/> with hour and minutes set At given values.
            </summary>
            <param name="current">The current <see cref="T:System.DateTime"/> to be changed.</param>
            <param name="hour">The hour to set time to.</param>
            <param name="minute">The minute to set time to.</param>
            <returns><see cref="T:System.DateTime"/> with hour and minute set to given values.</returns>
        </member>
        <member name="M:System.DateTimeExtensions.At(System.DateTime,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the given <see cref="T:System.DateTime"/> with hour and minutes and seconds set At given values.
            </summary>
            <param name="current">The current <see cref="T:System.DateTime"/> to be changed.</param>
            <param name="hour">The hour to set time to.</param>
            <param name="minute">The minute to set time to.</param>
            <param name="second">The second to set time to.</param>
            <returns><see cref="T:System.DateTime"/> with hour and minutes and seconds set to given values.</returns>
        </member>
        <member name="M:System.DateTimeExtensions.FirstDayOfMonth(System.DateTime)">
            <summary>
            Sets the day of the <see cref="T:System.DateTime"/> to the first day in that month.
            </summary>
            <param name="current">The current <see cref="T:System.DateTime"/> to be changed.</param>
            <returns>given <see cref="T:System.DateTime"/> with the day part set to the first day in that month.</returns>
        </member>
        <member name="M:System.DateTimeExtensions.LastDayOfMonth(System.DateTime)">
            <summary>
            Sets the day of the <see cref="T:System.DateTime"/> to the last day in that month.
            </summary>
            <param name="current">The current DateTime to be changed.</param>
            <returns>given <see cref="T:System.DateTime"/> with the day part set to the last day in that month.</returns>
        </member>
        <member name="M:System.DateTimeExtensions.AddBusinessDays(System.DateTime,System.Int32)">
            <summary>
            Adds the given number of business days to the <see cref="T:System.DateTime"/>.
            </summary>
            <param name="current">The date to be changed.</param>
            <param name="days">Number of business days to be added.</param>
            <returns>A <see cref="T:System.DateTime"/> increased by a given number of business days.</returns>
        </member>
        <member name="M:System.DateTimeExtensions.SubtractBusinessDays(System.DateTime,System.Int32)">
            <summary>
            Subtracts the given number of business days to the <see cref="T:System.DateTime"/>.
            </summary>
            <param name="current">The date to be changed.</param>
            <param name="days">Number of business days to be subtracted.</param>
            <returns>A <see cref="T:System.DateTime"/> increased by a given number of business days.</returns>
        </member>
        <member name="M:System.DateTimeExtensions.IsInFuture(System.DateTime)">
            <summary>
            Determine if a <see cref="T:System.DateTime"/> is in the future.
            </summary>
            <param name="dateTime">The date to be checked.</param>
            <returns><c>true</c> if <paramref name="dateTime"/> is in the future; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:System.DateTimeExtensions.IsInPast(System.DateTime)">
            <summary>
            Determine if a <see cref="T:System.DateTime"/> is in the past.
            </summary>
            <param name="dateTime">The date to be checked.</param>
            <returns><c>true</c> if <paramref name="dateTime"/> is in the past; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:System.DateTimeExtensions.First(System.DateTime)">
            <summary>
            Gets a DateTime representing the first day in the current month
            </summary>
            <param name="current">The current date</param>
            <returns></returns>
        </member>
        <member name="M:System.DateTimeExtensions.First(System.DateTime,System.DayOfWeek)">
            <summary>
            Gets a DateTime representing the first specified day in the current month
            </summary>
            <param name="current">The current day</param>
            <param name="dayOfWeek">The current day of week</param>
            <returns></returns>
        </member>
        <member name="M:System.DateTimeExtensions.Last(System.DateTime)">
            <summary>
            Gets a DateTime representing the last day in the current month
            </summary>
            <param name="current">The current date</param>
            <returns></returns>
        </member>
        <member name="M:System.DateTimeExtensions.Last(System.DateTime,System.DayOfWeek)">
            <summary>
            Gets a DateTime representing the last specified day in the current month
            </summary>
            <param name="current">The current date</param>
            <param name="dayOfWeek">The current day of week</param>
            <returns></returns>
        </member>
        <member name="M:System.DateTimeExtensions.Next(System.DateTime,System.DayOfWeek)">
            <summary>
            Returns first next occurrence of specified <see cref="T:System.DayOfWeek"/>.
            </summary>
        </member>
        <member name="M:System.DateTimeExtensions.StartOfWeek(System.DateTime)">
            <summary>
            Returns a DateTime adjusted to the beginning of the week.
            </summary>
            <param name="dateTime">The DateTime to adjust</param>
            <returns>A DateTime instance adjusted to the beginning of the current week</returns>
            <remarks>the beginning of the week is controlled by the current Culture</remarks>
        </member>
        <member name="M:System.DateTimeExtensions.WeekOfYear(System.DateTime)">
            <summary>
            获取当前日期是一年的中第几周
            </summary>
        </member>
        <member name="M:System.DateTimeExtensions.WeekOfMonth(System.DateTime)">
            <summary>获取当前日期是当前月的中第几周
            </summary>
        </member>
        <member name="M:System.DateTimeExtensions.Matching(System.DateTime,NKnife.Extensions.DateTimes.CountOfMonth)">
            <summary>获取当前日期是否匹配指定的参数
            </summary>
        </member>
        <member name="T:System.NumberExtensions">
            <summary>
            Static class containing Fluent <see cref="T:System.DateTime"/> extension methods.
            </summary>
        </member>
        <member name="M:System.NumberExtensions.Years(System.Int32)">
            <summary>
            Generates <see cref="T:System.TimeSpan"/> value for given number of Years.
            </summary>
        </member>
        <member name="M:System.NumberExtensions.Months(System.Int32)">
            <summary>
            Returns <see cref="T:System.TimeSpan"/> value for given number of Months.
            </summary>
        </member>
        <member name="M:System.NumberExtensions.Weeks(System.Int32)">
            <summary>
            Returns <see cref="T:System.TimeSpan"/> for given number of Weeks (number of weeks * 7).
            </summary>
        </member>
        <member name="M:System.NumberExtensions.Weeks(System.Double)">
            <summary>
            Returns <see cref="T:System.TimeSpan"/> for given number of Weeks (number of weeks * 7).
            </summary>
        </member>
        <member name="M:System.NumberExtensions.Days(System.Int32)">
            <summary>
            Returns <see cref="T:System.TimeSpan"/> for given number of Days.
            </summary>
        </member>
        <member name="M:System.NumberExtensions.Days(System.Double)">
            <summary>
            Returns <see cref="T:System.TimeSpan"/> for given number of Days.
            </summary>
        </member>
        <member name="M:System.NumberExtensions.Hours(System.Int32)">
            <summary>
            Returns <see cref="T:System.TimeSpan"/> for given number of Hours.
            </summary>
        </member>
        <member name="M:System.NumberExtensions.Hours(System.Double)">
            <summary>
            Returns <see cref="T:System.TimeSpan"/> for given number of Hours.
            </summary>
        </member>
        <member name="M:System.NumberExtensions.Minutes(System.Int32)">
            <summary>
            Returns <see cref="T:System.TimeSpan"/> for given number of Minutes.
            </summary>
        </member>
        <member name="M:System.NumberExtensions.Minutes(System.Double)">
            <summary>
            Returns <see cref="T:System.TimeSpan"/> for given number of Minutes.
            </summary>
        </member>
        <member name="M:System.NumberExtensions.Seconds(System.Int32)">
            <summary>
            Returns <see cref="T:System.TimeSpan"/> for given number of Seconds.
            </summary>
        </member>
        <member name="M:System.NumberExtensions.Seconds(System.Double)">
            <summary>
            Returns <see cref="T:System.TimeSpan"/> for given number of Seconds.
            </summary>
        </member>
        <member name="M:System.NumberExtensions.Milliseconds(System.Int32)">
            <summary>
            Returns <see cref="T:System.TimeSpan"/> for given number of Milliseconds.
            </summary>
        </member>
        <member name="M:System.NumberExtensions.Milliseconds(System.Double)">
            <summary>
            Returns <see cref="T:System.TimeSpan"/> for given number of Milliseconds.
            </summary>
        </member>
        <member name="M:System.NumberExtensions.Ticks(System.Int32)">
            <summary>
            Returns <see cref="T:System.TimeSpan"/> for given number of ticks.
            </summary>
        </member>
        <member name="M:System.NumberExtensions.Ticks(System.Int64)">
            <summary>
            Returns <see cref="T:System.TimeSpan"/> for given number of ticks.
            </summary>
        </member>
        <member name="T:System.TimeSpanExtensions">
            <summary>
            Static class containing Fluent <see cref="T:System.DateTime"/> extension methods.
            </summary>
        </member>
        <member name="M:System.TimeSpanExtensions.Ago(System.TimeSpan)">
            <summary>
            Subtracts given <see cref="T:System.TimeSpan"/> from current date (<see cref="P:System.DateTime.Now"/>) and returns resulting <see cref="T:System.DateTime"/> in the past.
            </summary>
        </member>
        <member name="M:System.TimeSpanExtensions.Ago(NKnife.Extensions.DateTimes.FluentTimeSpan)">
            <summary>
            Subtracts given <see cref="T:NKnife.Extensions.DateTimes.FluentTimeSpan"/> from current date (<see cref="P:System.DateTime.Now"/>) and returns resulting <see cref="T:System.DateTime"/> in the past.
            </summary>
        </member>
        <member name="M:System.TimeSpanExtensions.Ago(System.TimeSpan,System.DateTime)">
            <summary>
            Subtracts given <see cref="T:System.TimeSpan"/> from <paramref name="originalValue"/> <see cref="T:System.DateTime"/> and returns resulting <see cref="T:System.DateTime"/> in the past.
            </summary>
        </member>
        <member name="M:System.TimeSpanExtensions.Ago(NKnife.Extensions.DateTimes.FluentTimeSpan,System.DateTime)">
            <summary>
            Subtracts given <see cref="T:System.TimeSpan"/> from <paramref name="originalValue"/> <see cref="T:System.DateTime"/> and returns resulting <see cref="T:System.DateTime"/> in the past.
            </summary>
        </member>
        <member name="M:System.TimeSpanExtensions.Before(System.TimeSpan,System.DateTime)">
            <summary>
            Subtracts given <see cref="T:System.TimeSpan"/> from <paramref name="originalValue"/> <see cref="T:System.DateTime"/> and returns resulting <see cref="T:System.DateTime"/> in the past.
            </summary>
        </member>
        <member name="M:System.TimeSpanExtensions.Before(NKnife.Extensions.DateTimes.FluentTimeSpan,System.DateTime)">
            <summary>
            Subtracts given <see cref="T:System.TimeSpan"/> from <paramref name="originalValue"/> <see cref="T:System.DateTime"/> and returns resulting <see cref="T:System.DateTime"/> in the past.
            </summary>
        </member>
        <member name="M:System.TimeSpanExtensions.FromNow(System.TimeSpan)">
            <summary>
            Adds given <see cref="T:System.TimeSpan"/> to current <see cref="P:System.DateTime.Now"/> and returns resulting <see cref="T:System.DateTime"/> in the future.
            </summary>
        </member>
        <member name="M:System.TimeSpanExtensions.FromNow(NKnife.Extensions.DateTimes.FluentTimeSpan)">
            <summary>
            Adds given <see cref="T:System.TimeSpan"/> to current <see cref="P:System.DateTime.Now"/> and returns resulting <see cref="T:System.DateTime"/> in the future.
            </summary>
        </member>
        <member name="M:System.TimeSpanExtensions.From(System.TimeSpan,System.DateTime)">
            <summary>
            Adds given <see cref="T:System.TimeSpan"/> to supplied <paramref name="originalValue"/> <see cref="T:System.DateTime"/> and returns resulting <see cref="T:System.DateTime"/> in the future.
            </summary>
        </member>
        <member name="M:System.TimeSpanExtensions.From(NKnife.Extensions.DateTimes.FluentTimeSpan,System.DateTime)">
            <summary>
            Adds given <see cref="T:System.TimeSpan"/> to supplied <paramref name="originalValue"/> <see cref="T:System.DateTime"/> and returns resulting <see cref="T:System.DateTime"/> in the future.
            </summary>
        </member>
        <member name="M:System.TimeSpanExtensions.Since(System.TimeSpan,System.DateTime)">
            <summary>
            Adds given <see cref="T:System.TimeSpan"/> to supplied <paramref name="originalValue"/> <see cref="T:System.DateTime"/> and returns resulting <see cref="T:System.DateTime"/> in the future.
            </summary>
            <seealso cref="M:System.TimeSpanExtensions.From(System.TimeSpan,System.DateTime)"/>
            <remarks>
            Synonym of <see cref="M:System.TimeSpanExtensions.From(System.TimeSpan,System.DateTime)"/> method.
            </remarks>
        </member>
        <member name="M:System.TimeSpanExtensions.Since(NKnife.Extensions.DateTimes.FluentTimeSpan,System.DateTime)">
            <summary>
            Adds given <see cref="T:System.TimeSpan"/> to supplied <paramref name="originalValue"/> <see cref="T:System.DateTime"/> and returns resulting <see cref="T:System.DateTime"/> in the future.
            </summary>
            <seealso cref="M:System.TimeSpanExtensions.From(NKnife.Extensions.DateTimes.FluentTimeSpan,System.DateTime)"/>
            <remarks>
            Synonym of <see cref="M:System.TimeSpanExtensions.From(NKnife.Extensions.DateTimes.FluentTimeSpan,System.DateTime)"/> method.
            </remarks>
        </member>
        <member name="M:System.TimeSpanExtensions.ToDisplayString(NKnife.Extensions.DateTimes.FluentTimeSpan)">
            <summary>
            Convert a <see cref="T:System.TimeSpan"/> to a human readable string.
            </summary>
            <param name="timeSpan">The <see cref="T:System.TimeSpan"/> to convert</param>
            <returns>A human readable string for <paramref name="timeSpan"/></returns>
        </member>
        <member name="M:System.TimeSpanExtensions.ToDisplayString(System.TimeSpan)">
            <summary>
            Convert a <see cref="T:System.TimeSpan"/> to a human readable string.
            </summary>
            <param name="timeSpan">The <see cref="T:System.TimeSpan"/> to convert</param>
            <returns>A human readable string for <paramref name="timeSpan"/></returns>
        </member>
        <member name="T:System.Linq.ExpressionExtension">
            <summary>
            linq 表达式创建类
            </summary>
        </member>
        <member name="M:System.IntegerExtension.ToBytes(System.Int32,System.Int32)">
            <summary>
                将指定整数转换成指定长度字节数组，不足的前补0，超过的舍弃高位字节
                例如：
            </summary>
            <param name="source"></param>
            <param name="byteCount">字节数组的长度，等于0时无长度约束，不补0也不舍弃 </param>
            <returns></returns>
        </member>
        <member name="M:System.IntegerExtension.InRange(System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
                判断指定整数是否在范围内， 大于min,小于max
            </summary>
            <param name="source"></param>
            <param name="min">范围下限</param>
            <param name="max">范围上限</param>
            <param name="includeMin">包含下限</param>
            <param name="inclueMax">包含上限</param>
            <returns></returns>
        </member>
        <member name="M:System.NullExtension.IsNullOrEmpty``1(``0)">
            <summary>
            检测对象是否为空，为空返回true
            </summary>
            <typeparam name="T">要验证的对象的类型</typeparam>
            <param name="data">要验证的对象</param>        
        </member>
        <member name="M:System.NullExtension.IsNullOrEmpty(System.Object)">
            <summary>
            检测对象是否为空，为空返回true
            </summary>
            <param name="data">要验证的对象</param>
        </member>
        <member name="M:System.QueryExtension.ToModel``1(System.Data.DataRow)">
            <summary>
                DataRow扩展方法：将DataRow类型转化为指定类型的实体
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:System.QueryExtension.ToModel``1(System.Data.DataRow,System.Boolean)">
            <summary>
                DataRow扩展方法：将DataRow类型转化为指定类型的实体
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="dateTimeToString">是否需要将日期转换为字符串，默认为转换,值为true</param>
            <returns></returns>
        </member>
        <member name="M:System.QueryExtension.ToList``1(System.Data.DataTable)">
            <summary>
                DataTable扩展方法：将DataTable类型转化为指定类型的实体集合
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:System.QueryExtension.ToList``1(System.Data.DataTable,System.Boolean)">
            <summary>
                DataTable扩展方法：将DataTable类型转化为指定类型的实体集合
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="dt"></param>
            <param name="dateTimeToString">是否需要将日期转换为字符串，默认为转换,值为true</param>
            <returns></returns>
        </member>
        <member name="M:System.RandomExtension.GetRandomItem(System.Int32)">
            <summary>
                返回一个小于或等于maxValue的随机正整数
            </summary>
            <param name="maxValue"></param>
            <returns></returns>
        </member>
        <member name="M:System.RandomExtension.GetRandomItem``1(System.Collections.Generic.List{``0},System.Boolean)">
            <summary>
                从集合中随机选取一个
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="removeSelected">选后是否删除选中的，默认不删除</param>
            <returns></returns>
        </member>
        <member name="M:System.RandomExtension.GetRandomItem``1(``0[])">
            <summary>
                从集合中随机选取一个
            </summary>
        </member>
        <member name="T:System.SequentialGuid">
            <summary>
            Contains methods for creating sequential GUID values.
            生成连续有意义的GUID。
            </summary>
        </member>
        <member name="F:System.SequentialGuid._RandomGenerator">
            <summary>
            Provides cryptographically strong random data for GUID creation.
            </summary>
        </member>
        <member name="M:System.SequentialGuid.Create(System.SequentialGuidType)">
            <summary>
            Returns a new GUID value which is sequentially ordered when formatted as
            a string, a byte array, or ordered by the least significant six bytes of the
            Data4 block, as specified by <paramref name="guidType" />.
            </summary>
            <param name="guidType">
            Specifies the type of sequential GUID (i.e. whether sequential as a string,
            as a byte array, or according to the Data4 block.  This can affect
            performance under various database types; see below.
            </param>
            <returns>
            A <see cref="T:System.Guid" /> structure whose value is created by replacing
            certain randomly-generated bytes with a sequential timestamp.
            </returns>
            <remarks>
            <para>
            This method creates a new GUID value which combines a random component
            with the current timestamp, also known as a COMB.  The general concept
            is outlined in Jimmy Nilsson's article "The Cost of GUIDs as Primary Keys",
            and involves replacing either the least significant or most significant
            six bytes of the GUID with the current timestamp.  This reduces the
            random component of the GUID from 16 bytes to 10 bytes, but this is
            still sufficient to prevent a collision under most real-world circumstances.
            </para>
            <para>
            The purpose of sequential GUIDs is not to promote the use of GUIDs as
            sortable entities.  In fact, GUIDs generated very close together may
            have the same timestamp and are not guaranteed to be sequentially ordered
            at all.  The intent is to increase performance when doing repeated
            inserts into database tables that have a clustered index on a GUID
            column, so that later entries do not have to be inserted into the middle
            of the table, but can simply be appended to the end.
            </para>
            <para>
            According to experiments, Microsoft SQL Server sorts GUID values using
            the least significant six bytes of the Data4 block; therefore, GUIDs being
            generated for use with SQL Server should pass a <paramref name="guidType" /> 
            value of <c>SequentialAtEnd</c>.  GUIDs generated for most other database
            types should be passed a <paramref name="guidType" /> value of
            <c>SequentialAsString</c> or <c>SequentialAsByteArray</c>.
            </para>
            <para>
            Various standards already define a time-based UUID; however, the
            format specified by these standards splits the timestamp into
            several components, limiting its usefulness as a sequential ID.
            Additionally, the format used for such UUIDs is not compatible
            with the GUID ordering on Microsoft SQL Server.
            </para>
            </remarks>
        </member>
        <member name="T:System.SequentialGuidType">
            <summary>
            Describes the type of a sequential GUID value.
            </summary>
        </member>
        <member name="F:System.SequentialGuidType.SequentialAsString">
            <summary>
            The GUID should be sequential when formatted using the
            <see cref="M:System.Guid.ToString" /> method.
            </summary>
        </member>
        <member name="F:System.SequentialGuidType.SequentialAsBinary">
            <summary>
            The GUID should be sequential when formatted using the
            <see cref="M:System.Guid.ToByteArray" /> method.
            </summary>
        </member>
        <member name="F:System.SequentialGuidType.SequentialAtEnd">
            <summary>
            The sequential portion of the GUID should be located at the end
            of the Data4 block.
            </summary>
        </member>
        <member name="M:System.IO.StreamExtension.StreamToString(System.IO.Stream,System.Text.Encoding)">
            <summary>
                将流转换成字符串,同时关闭该流
            </summary>
            <param name="stream">流</param>
            <param name="encoding">字符编码</param>
        </member>
        <member name="M:System.IO.StreamExtension.StreamToString(System.IO.Stream)">
            <summary>
                将流转换成字符串,同时关闭该流
            </summary>
            <param name="stream">流</param>
        </member>
        <member name="M:System.StringBuilderExtension.GetEnumerator(System.Text.StringBuilder)">
            <summary>返回本实例的公开枚举器
            </summary>
        </member>
        <member name="M:System.StringBuilderExtension.ToUpper(System.Text.StringBuilder)">
            <summary>将本实例全部大写
            </summary>
            <param name="sb">The sb.</param>
            <returns></returns>
        </member>
        <member name="M:System.StringBuilderExtension.ToLower(System.Text.StringBuilder)">
            <summary>将本实例全部小写
            </summary>
            <param name="sb">The sb.</param>
            <returns></returns>
        </member>
        <member name="M:System.StringExtension.GetInArrayIndex(System.String,System.String[],System.Boolean)">
            <summary>
                判断指定字符串在指定字符串数组中的位置
            </summary>
            <param name="srcString">字符串</param>
            <param name="stringArray">字符串数组</param>
            <param name="caseSensitive">是否不区分大小写, true为不区分, false为区分</param>
            <returns>字符串在指定字符串数组中的位置, 如不存在则返回-1</returns>
        </member>
        <member name="M:System.StringExtension.GetInArrayIndex(System.String,System.String[])">
            <summary>
                判断指定字符串在指定字符串数组中的位置
            </summary>
            <param name="srcString">字符串</param>
            <param name="stringArray">字符串数组</param>
            <returns>字符串在指定字符串数组中的位置, 如不存在则返回-1</returns>
        </member>
        <member name="M:System.StringExtension.InArray(System.String,System.String[],System.Boolean)">
            <summary>
                判断指定字符串是否属于指定字符串数组中的一个元素
            </summary>
            <param name="srcString">字符串</param>
            <param name="stringArray">字符串数组</param>
            <param name="caseSensitive">是否不区分大小写, true为不区分, false为区分</param>
            <returns>判断结果</returns>
        </member>
        <member name="M:System.StringExtension.InArray(System.String,System.String[])">
            <summary>
                判断指定字符串是否属于指定字符串数组中的一个元素
            </summary>
            <param name="srcString">字符串</param>
            <param name="stringArray">字符串数组</param>
            <returns>判断结果</returns>
        </member>
        <member name="M:System.StringExtension.TrimTail(System.String)">
            <summary>
                删除字符串尾部的回车/换行/空格
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:System.StringExtension.TrimZero(System.String)">
            <summary>
                去除字符串尾部的“0”字符
            </summary>
        </member>
        <member name="M:System.StringExtension.TrimBr(System.String)">
            <summary>
                清除给定字符串中的回车及换行符
            </summary>
            <param name="str">要清除的字符串</param>
            <returns>清除后返回的字符串</returns>
        </member>
        <member name="M:System.StringExtension.IsEmptyAndZero(System.String)">
            <summary>
                是否是Null,空,全部是空白或全部为0的字符串
            </summary>
            <param name="str">The STR.</param>
            <returns>
                <c>true</c> if [is composed by zero] [the specified STR]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.StringExtension.IslLatinLetter(System.Char)">
            <summary>
                是否是拉丁字母（大小写均可）
            </summary>
        </member>
        <member name="M:System.StringExtension.IsValidEmailAddress(System.String)">
            <summary>
                判断是否邮箱地址
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:System.StringExtension.IsPositiveInteger(System.String,System.Int32@)">
            <summary>
                判断是否正整数
            </summary>
            <param name="data"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:System.StringExtension.IsInteger(System.String,System.Int32@,System.Int32,System.Int32)">
            <summary>
                判断是否整数，并位于 min 和 max之间
            </summary>
            <param name="data"></param>
            <param name="result"></param>
            <param name="min"> </param>
            <param name="max"> </param>
            <returns></returns>
        </member>
        <member name="M:System.StringExtension.IsNullOrEmptyOrConsistBy(System.String,System.Char)">
            <summary>
                判断是否为null,empty,或由指定字符组成
            </summary>
            <param name="data"></param>
            <param name="element"> </param>
            <returns></returns>
        </member>
        <member name="M:System.StringExtension.IsNumeric(System.String)">
            <summary>
                判断是否由数字组成
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:System.StringExtension.MatchFilters(System.String,System.String[],System.Boolean)">
            <summary>
                判断字符串是否能被(filters)过滤
                strictMatch=true时，是严格过滤模式，src必须完全等于filters中的某一项，才算Match，return true
                strictMatch=false时，是宽松过滤模式，src只要包含filters中的某一项，算Match，return true
            </summary>
            <param name="src"></param>
            <param name="filters"></param>
            <param name="strictMatch"></param>
            <returns></returns>
        </member>
        <member name="M:System.StringExtension.ToBytes(System.String,System.Char[])">
            <summary>
                将用分隔符分隔ASCII字节的字符串转换成字节数组（去除分隔符）
            </summary>
            <param name="arrayString">用分隔符分隔ASCII字节的字符串</param>
            <param name="separator">分隔符</param>
            <returns>去除分隔符的字符串的字节数组</returns>
        </member>
        <member name="M:System.StringExtension.IsChineseLetter(System.String)">
            <summary>
                给定一个字符串，判断其是否是中文字符串
            </summary>
            <param name="src">The SRC.</param>
            <returns>
                <c>true</c> if [is chinese letter] [the specified SRC]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.StringExtension.IsOnlyContainsChinese(System.String)">
            <summary>
                给定一个字符串，判断其是否仅仅包含有汉字
            </summary>
        </member>
        <member name="M:System.StringExtension.IsGbCode(System.String)">
            <summary>
                判断一个word是否为GB2312编码的汉字
            </summary>
        </member>
        <member name="M:System.StringExtension.IsGbkCode(System.String)">
            <summary>
                判断一个word是否为GBK编码的汉字
            </summary>
            <param></param>
            <param name="word"></param>
            <returns></returns>
        </member>
        <member name="M:System.StringExtension.IsBig5Code(System.String)">
            <summary>
                判断一个word是否为Big5编码的汉字
            </summary>
            <param name="word"></param>
            <returns></returns>
        </member>
        <member name="M:System.Xml.XmlExtension.SetXmlDeclaration(System.Xml.XmlDocument,System.String,System.String,System.String)">
            <summary>
                快速创建XML的XmlDeclaration结点
            </summary>
            <param name="document">The document.</param>
            <param name="version">The version.</param>
            <param name="encoding">The encoding.</param>
            <param name="standalone">The standalone.</param>
        </member>
        <member name="M:System.Xml.XmlExtension.GetElementByName(System.Xml.XmlNode,System.String,System.Boolean)">
            <summary>
                根据XmlElement的LocalName获取一组XmlElement中的第一个Element
            </summary>
            <param name="node">将要查找的父级XmlNode</param>
            <param name="name">要查找的Element的LcoalName</param>
            <param name="ifNotCreateNew">没有这个节点，是否新建。默认false，如果没有找到该节点，则返加null，不创建。</param>
            <returns></returns>
        </member>
        <member name="M:System.Xml.XmlExtension.GetElementById(System.Xml.XmlNode,System.String,System.String)">
            <summary>
                如果Element有一个属性的名为“id”，根据XmlElement的LocalName和id的值获取一组XmlElement中的第一个Element
            </summary>
            <param name="node">将要查找的父级XmlNode</param>
            <param name="name">要查找的Element的LcoalName</param>
            <param name="id">id的值</param>
            <returns></returns>
        </member>
        <member name="M:System.Xml.XmlExtension.ContainsValuesByGroupItems(System.Xml.XmlElement,System.String,System.Xml.XmlNodeType,System.String,System.String[])">
            <summary>
                从XmlElement里查代一组值是否存在，返回不存在的值，已存在的值的不返回。
                如：＜groups＞＜item value="a"＞＜/item＞＜item value="B"＞＜/item＞＜/groups＞
            </summary>
            <param name="groupEle">将搜索的XmlElement</param>
            <param name="itemNodeName">子XmlElement的LocalName</param>
            <param name="nodeType">数据存储的类型,值只能存放在Attribute，CDATA，Text三种类型的节点中</param>
            <param name="valueList">值的数组</param>
            <param name="attributeName">当数据存储节点类型为Attribute时的属性的LocalName，当其他类型时输入Null</param>
            <returns>返回一组不包含在父级Element中的值的数组</returns>
        </member>
        <member name="M:System.Xml.XmlExtension.ContainsValuesByGroupItems(System.Xml.XmlElement,System.String,System.Xml.XmlNodeType,System.String,System.Collections.Generic.List{System.String})">
            <summary>
                从XmlElement里查代一组值是否存在，返回不存在的值，已存在的值的不返回。
                如：＜groups＞＜item value="a"＞＜/item＞＜item value="B"＞＜/item＞＜/groups＞
            </summary>
            <param name="groupEle">将搜索的XmlElement</param>
            <param name="itemNodeName">子XmlElement的LocalName</param>
            <param name="nodeType">数据存储的类型,值只能存放在Attribute，CDATA，Text三种类型的节点中</param>
            <param name="valueList">值的集合</param>
            <param name="attributeName">当数据存储节点类型为Attribute时的属性的LocalName，当其他类型时输入Null</param>
            <returns>返回一组不包含在父级Element中的值的数组</returns>
        </member>
        <member name="M:System.Xml.XmlExtension.GetGroupItemsValue(System.Xml.XmlElement,System.String,System.Xml.XmlNodeType,System.String)">
            <summary>
                从XmlElement里获取一组值。
                如：＜groups＞＜item value="a"＞＜/item＞＜item value="B"＞＜/item＞＜/groups＞
            </summary>
            <param name="groupEle">从此XmlElement里获取值</param>
            <param name="itemNodeName">子节点的LocalName</param>
            <param name="nodeType">数据存储的类型,值只能存放在Attribute，CDATA，Text三种类型的节点中</param>
            <param name="attributeName">当数据存储节点类型为Attribute时的属性的LocalName，当其他类型时输入Null</param>
            <returns>一组值的字符串</returns>
        </member>
        <member name="M:System.Xml.XmlExtension.AppendGroupItemsValue(System.Xml.XmlElement,System.String,System.Xml.XmlNodeType,System.String,System.Boolean,System.String[])">
            <summary>
                向XmlElement里追加一组节点，并设置这组节点的值。
                如：＜groups＞＜item value="a"＞＜/item＞＜item value="B"＞＜/item＞＜/groups＞
            </summary>
            <param name="groupEle">将设置的XmlElement</param>
            <param name="itemNodeName">子XmlElement的LocalName</param>
            <param name="nodeType">数据存储的节点类型,值只能存放在Attribute，CDATA，Text三种类型的节点中</param>
            <param name="attributeName">当数据存储类型为Attribute时的属性的LocalName，当其他类型时输入Null</param>
            <param name="isRepeat">是否允许有重复的值,true允许,false不允许(如不允许将增加大量的运算时间)</param>
            <param name="valueList">值的数组</param>
        </member>
        <member name="M:System.Xml.XmlExtension.AppendGroupItemsValue(System.Xml.XmlElement,System.String,System.Xml.XmlNodeType,System.String,System.Boolean,System.Collections.Generic.List{System.String})">
            <summary>
                向XmlElement里追加一组节点，并设置这组节点的值。
                如：＜groups＞＜item value="a"＞＜/item＞＜item value="B"＞＜/item＞＜/groups＞
            </summary>
            <param name="groupEle">将设置的XmlElement</param>
            <param name="itemNodeName">子XmlElement的LocalName</param>
            <param name="nodeType">数据存储的节点类型,值只能存放在Attribute，CDATA，Text三种类型的节点中</param>
            <param name="attributeName">当数据存储类型为Attribute时的属性的LocalName，当其他类型时输入Null</param>
            <param name="isRepeat">是否允许有重复的值,true允许,false不允许(如不允许将增加大量的运算时间)</param>
            <param name="valueList">值的集合</param>
        </member>
        <member name="M:System.Xml.XmlExtension.RemoveAllElements(System.Xml.XmlNode)">
            <summary>
                清除所有NodeType为Element的子节点
            </summary>
            <param name="node">所有子节点的父节点</param>
        </member>
        <member name="M:System.Xml.XmlExtension.GetCDataElement(System.Xml.XmlNode)">
            <summary>
                获得一个XmlNode的CData节点(当他有时，如无，将返回Null)
            </summary>
            <param name="childNode">The child node.</param>
            <returns></returns>
        </member>
        <member name="M:System.Xml.XmlExtension.SetCDataElement(System.Xml.XmlNode,System.String)">
            <summary>
                创建并追加XmlNode的CData节点
            </summary>
            <param name="childNode">The child node.</param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:System.Xml.XmlExtension.SetChildElement(System.Xml.XmlElement,System.String,System.Object,System.Tuple{System.String,System.String}[])">
            <summary>
                快速创建并追加一个普通的数据节点
            </summary>
            <param name="element">The element.</param>
            <param name="localName">The localName.</param>
            <param name="value">The value.</param>
            <param name="attributes">属性集合</param>
        </member>
        <member name="T:System.CompressHelper">
            <summary>对一些压缩方法的封装
            </summary>
        </member>
        <member name="M:System.CompressHelper.IsCompressed(System.Byte[])">
            <summary>判断指定的字节数组是否是被GZip压缩过的
            </summary>
            <param name="bytes">The bytes.</param>
            <returns>
              <c>true</c> if the specified bytes is compressed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.CompressHelper.Compress(System.Byte[])">
            <summary>压缩指定的字节数组
            </summary>
            <param name="bytes">The bytes.</param>
            <returns></returns>
        </member>
        <member name="M:System.CompressHelper.Decompress(System.Byte[])">
            <summary>解压指定的字节数组
            </summary>
            <param name="bytes">The bytes.</param>
            <returns></returns>
        </member>
    </members>
</doc>
